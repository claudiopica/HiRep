/***************************************************************************\
* Copyright (c) 2023, Sofie Martins                                         *
* All rights reserved.                                                      *
\***************************************************************************/

#ifdef WITH_GPU

#include <string.h>
#include "geometry.h"
#include "Utils/generics.h"
#include "error.h"
#include "../convert_kernels.hpp"

#if !defined _FIELD_TYPE
#error Missing _FIELD_TYPE in memory.c
#endif
#if !defined _SITE_TYPE
#error Missing _SITE_TYPE in memory.c
#endif
#if !defined _FIELD_DIM
#error Missing _FIELD_DIM in memory.c
#endif
#if !defined _IS_SPINOR_LIKE
#error Missing _IS_SPINOR_LIKE in memory.c
#endif
#if !defined _REAL
#error Missing _REAL in convert.cu
#endif

#define _F_ARGS(_name, _suffix, _args) _F_NAME(_name, _FIELD_TYPE) _args

// This is necessary, because spinor-like fields have an additional argument
#if _IS_SPINOR_LIKE == 0
#define _n 1
#define _GEOM_TYPE gauge
#define _ALLOCATE _F_ARGS(alloc_, _FIELD_TYPE, (f->type))
#else
#define _n n
#define _GEOM_TYPE spinor
#define _ALLOCATE _F_ARGS(alloc_, _FIELD_TYPE, (1, f->type))
#endif

_FUNC(void, to_gpu_format_, _FIELD_TYPE, (_FIELD_TYPE * out, _FIELD_TYPE *in)) {
    _CHECK_GEOMETRY_MATCHING(out, in);
    to_gpu_format_convert<_FIELD_DIM, _REAL, _FIELD_TYPE>(out, in);
}

_FUNC(void, to_cpu_format_, _FIELD_TYPE, (_FIELD_TYPE * out, _FIELD_TYPE *in)) {
    _CHECK_GEOMETRY_MATCHING(out, in);
    to_cpu_format_convert<_FIELD_DIM, _REAL, _FIELD_TYPE>(out, in);
}

_FUNC(void, copy_to_gpu_, _FIELD_TYPE, (_FIELD_TYPE * f)) {
    _FIELD_TYPE *tmp = _ALLOCATE;
    size_t field_size = _FIELD_DIM * _NUMBER_OF_SITES(f->type, _GEOM_TYPE) * sizeof(_SITE_TYPE);
    cudaError_t err;
    err = cudaMemcpy(tmp->gpu_ptr, f->ptr, field_size, cudaMemcpyHostToDevice);
    error(err != cudaSuccess, 1, __func__, "Could not transfer field to device.\n");
    _F_NAME(to_gpu_format_, _FIELD_TYPE)(f, tmp);
    _F_NAME(free_, _FIELD_TYPE)(tmp);
}

_FUNC(void, copy_from_gpu_, _FIELD_TYPE, (_FIELD_TYPE * f)) {
    _FIELD_TYPE *tmp = _ALLOCATE;
    _F_NAME(to_cpu_format_, _FIELD_TYPE)(tmp, f);
    cudaError_t err;
    size_t field_size = _FIELD_DIM * _NUMBER_OF_SITES(f->type, _GEOM_TYPE) * sizeof(_SITE_TYPE);
    err = cudaMemcpy(f->ptr, tmp->gpu_ptr, field_size, cudaMemcpyDeviceToHost);
    error(err != cudaSuccess, 1, __func__, "Could not transfer field to host.\n");
    _F_NAME(free_, _FIELD_TYPE)(tmp);
}

#undef _F_ARGS
#undef _ALLOCATE
#undef _n
#undef _GEOM_TYPE

// Template paramters
#undef _FIELD_TYPE
#undef _SITE_TYPE
#undef _FIELD_DIM
#undef _IS_SPINOR_LIKE
#undef _REAL

#endif