/***************************************************************************\
* Copyright (c) 2023, Sofie Martins, Claudio Pica                           *   
* All rights reserved.                                                      * 
\***************************************************************************/

#ifdef WITH_GPU

#include <string.h>
#include "geometry.h"
#include "memory.h"
#include "Utils/generics.h"
#include <stdio.h>
#include <unistd.h>

#if !defined _FIELD_TYPE
#error Missing _FIELD_TYPE in communications_reduced.c
#endif
#if !defined _SITE_TYPE
#error Missing _SITE_TYPE in communications_reduced.c
#endif
#if !defined _FIELD_DIM
#error Missing _FIELD_DIM in communications_reduced.c
#endif
#if !defined _GEOM_TYPE
#error Missing _GEOM_TYPE in communications_reduced.c
#endif
#if !defined _MPI_REAL
#error Missing _MPI_REAL in communications_reduced.c
#endif
#if !defined _REAL
#error Missing _REAL in communications_reduced.c
#endif

#define _DECLARE(_name, _args) _FUNC(void, _name, _FIELD_TYPE, _args)
#define _GPU_DECLARE(_name, _args) _GPU_FUNC(void, _name, _FIELD_TYPE, _args)
#define roundUp(_val, _mod) ((((_val - 1) / (_mod)) + 1) * (_mod))

_GPU_DECLARE(sync_reduced_, (_FIELD_TYPE * f)) {
#ifdef WITH_MPI
    _BUFFER_BOX_FOR(L, _F_NAME(sync_box_to_buffer_gpu_reduced_, _FIELD_TYPE)(f->type, L->sendBox, f, f->sendbuf_gpu_ptr, i,
                                                                             L->mask);)
#endif
}

_DECLARE(sync_reduced_init_, (_FIELD_TYPE * f)) {
#ifdef WITH_MPI
    _BUFFER_BOX_FOR(L, _F_NAME(sync_box_reduced_init_, _FIELD_TYPE)(f->type, L->sendBox, f, f->sendbuf_gpu_ptr, i);)
    _F_NAME(check_sendrecv_guard_, _FIELD_TYPE)(f);
    _F_NAME(lock_communications_, _FIELD_TYPE)(f);
    _GPU_F_NAME(sync_reduced_, _FIELD_TYPE)(f);
#endif
}

_DECLARE(start_sendrecv_reduced_, (_FIELD_TYPE * f)) {
#ifdef WITH_MPI
    geometry_descriptor *type = f->type;
    int nbuffers = _NUMBER_OF_BUFFERS(type, _GEOM_TYPE);
    const int mpi_chunks_per_site = sizeof(_SITE_TYPE) / sizeof(_REAL);
    hr_sendrecv(f->sendbuf_gpu_ptr, f->gpu_ptr, f->type, _MPI_REAL, _FIELD_DIM, sizeof(_REAL), mpi_chunks_per_site, nbuffers,
                f->comm_req);
#endif
}

_DECLARE(complete_sendrecv_reduced_, (_FIELD_TYPE * f)) {
#ifdef WITH_MPI
    int nreq = 2 * _NUMBER_OF_BUFFERS(f->type, _GEOM_TYPE);
    _F_NAME(release_communications_, _FIELD_TYPE)(f);
    hr_sendrecv_complete(nreq, f->comm_req);
#endif
}

#endif

#undef _DECLARE
#undef _GPU_DECLARE
#undef _FIELD_TYPE
#undef _SITE_TYPE
#undef _FIELD_DIM
#undef _MPI_REAL
#undef _REAL
