/***************************************************************************\
* Copyright (c) 2008, Claudio Pica and Agostino Patella                     *
* All rights reserved.                                                      *
\***************************************************************************/

#include "communications.h"
#include "hr_complex.h"
#include "suN.h"
#include "suN_types.h"

#ifdef __cplusplus
    extern "C" {
#endif

/* s1=s2 */
_FUNC(void, spinor_field_copy, (_SPINOR_FIELD_TYPE *s1, _SPINOR_FIELD_TYPE *s2))
_BODY({
    _TWO_SPINORS_MATCHING(s1,s2);
    memcpy(s1->ptr,s2->ptr,s1->type->gsize_spinor*sizeof(_SPINOR_TYPE));
})

/* Re <s1,s2> */
_FUNC(double, spinor_field_prod_re, (_SPINOR_FIELD_TYPE *s1, _SPINOR_FIELD_TYPE *s2))
_BODY({
    static double res;
    _OMP_PRAGMA ( single ) {
        res = 0.;
    }

    _TWO_SPINORS_FOR_SUM(s1,s2,res) {
        _REAL prod;
        _spinor_prod_re_f(prod,*_SPINOR_PTR(s1),*_SPINOR_PTR(s2));
        res+=(double)prod;
    }
#ifdef WITH_MPI
    global_sum(&res,1);
#endif
    return res;
})

/* Im <s1,s2> */
_FUNC(double, spinor_field_prod_im, (_SPINOR_FIELD_TYPE *s1, _SPINOR_FIELD_TYPE *s2))
_BODY({
    static double res;
    _OMP_PRAGMA ( single ) {
        res = 0.;
    }

    _TWO_SPINORS_FOR_SUM(s1,s2,res) {
        _REAL prod;
        _spinor_prod_im_f(prod,*_SPINOR_PTR(s1),*_SPINOR_PTR(s2));
        res+=(double)prod;
   }
#ifdef WITH_MPI
    global_sum(&res,1);
#endif
   return res;
})

/* <s1,s2> */
_FUNC(hr_complex, spinor_field_prod, (_SPINOR_FIELD_TYPE *s1, _SPINOR_FIELD_TYPE *s2))
_BODY({
    static hr_complex res;
    _OMP_PRAGMA ( single ) {
        _complex_0(res);
    }

    _TWO_SPINORS_FOR_SUM(s1,s2,res) {
        _COMPLEX loc_res; //needed for OMP threads
        _spinor_prod_f(loc_res,*_SPINOR_PTR(s1),*_SPINOR_PTR(s2));
        _complex_add_assign(res,loc_res);
    }
#ifdef WITH_MPI
    global_sum((double*)&res,2);
#endif
    return res;
})

/* Re <g5*s1,s2> */
_FUNC(double, spinor_field_g5_prod_re, (_SPINOR_FIELD_TYPE *s1, _SPINOR_FIELD_TYPE *s2))
_BODY({
    static double res;
    _OMP_PRAGMA ( single ) {
        res = 0.;
    }

    _TWO_SPINORS_FOR_SUM(s1,s2,res) {
        _REAL prod;
        _spinor_g5_prod_re_f(prod,*_SPINOR_PTR(s1),*_SPINOR_PTR(s2));
        res+=(double)prod;
    }
#ifdef WITH_MPI
    global_sum(&res,1);
#endif
    return res;
})

/* Im <g5*s1,s2> */
_FUNC(double, spinor_field_g5_prod_im, (_SPINOR_FIELD_TYPE *s1, _SPINOR_FIELD_TYPE *s2))
_BODY({
    static double res;
    _OMP_PRAGMA ( single ) {
        res = 0.;
    }

    _TWO_SPINORS_FOR_SUM(s1,s2,res) {
        _REAL prod;
        _spinor_g5_prod_im_f(prod,*_SPINOR_PTR(s1),*_SPINOR_PTR(s2));
        res+=(double)prod;
    }
#ifdef WITH_MPI
    global_sum(&res,1);
#endif
    return res;
})

/* Re <s1,s1> */
_FUNC(double, spinor_field_sqnorm, (_SPINOR_FIELD_TYPE *s1))
_BODY({
    static double res;
    _OMP_PRAGMA ( single ) {
        res = 0.;
    }
    
    _ONE_SPINOR_FOR_SUM(s1,res) {
        _REAL prod;
        _spinor_prod_re_f(prod,*_SPINOR_PTR(s1),*_SPINOR_PTR(s1));
        res += (double)prod;
   }
   
#ifdef WITH_MPI
    _OMP_PRAGMA ( master ) {
        global_sum(&res,1);
    }
    _OMP_BARRIER
#endif

    return res;
})

/* s1+=r*s2 r real */
_FUNC(void, spinor_field_mul_add_assign, (_SPINOR_FIELD_TYPE *s1, _REAL r, _SPINOR_FIELD_TYPE *s2))
_BODY({
    _TWO_SPINORS_FOR(s1,s2) {
        _spinor_mul_add_assign_f(*_SPINOR_PTR(s1),r,*_SPINOR_PTR(s2));
    }
})

/* s1+=c*s2 c complex */
_FUNC(void, spinor_field_mulc_add_assign, (_SPINOR_FIELD_TYPE *s1, _COMPLEX c, _SPINOR_FIELD_TYPE *s2))
_BODY({
    _TWO_SPINORS_FOR(s1,s2) {
        _spinor_mulc_add_assign_f(*_SPINOR_PTR(s1),c,*_SPINOR_PTR(s2));
    }
})

/* s1+=c*g5*s2 c complex */
_FUNC(void, spinor_field_g5_mulc_add_assign, (_SPINOR_FIELD_TYPE *s1, _COMPLEX c, _SPINOR_FIELD_TYPE *s2))
_BODY({
    _SPINOR_TYPE tmp;
    _TWO_SPINORS_FOR(s1,s2) {
        _spinor_g5_f(tmp,*_SPINOR_PTR(s2));
        _spinor_mulc_add_assign_f(*_SPINOR_PTR(s1),c,tmp);
    }
})


/* s1=r*s2 */
_FUNC(void, spinor_field_mul, (_SPINOR_FIELD_TYPE *s1, _REAL r, _SPINOR_FIELD_TYPE *s2))
_BODY({
    _TWO_SPINORS_FOR(s1,s2) {
        _spinor_mul_f(*_SPINOR_PTR(s1),r,*_SPINOR_PTR(s2));
    }
})

/* s1=c*s2 c complex */
_FUNC(void, spinor_field_mulc, (_SPINOR_FIELD_TYPE *s1, _COMPLEX c, _SPINOR_FIELD_TYPE *s2))
_BODY({
    _TWO_SPINORS_FOR(s1,s2) {
        _spinor_mulc_f(*_SPINOR_PTR(s1),c,*_SPINOR_PTR(s2));
    }
})

/* r=s1+s2 */
_FUNC(void, spinor_field_add, (_SPINOR_FIELD_TYPE *r, _SPINOR_FIELD_TYPE *s1, _SPINOR_FIELD_TYPE *s2))
_BODY({
    _THREE_SPINORS_FOR(s1,s2,r) {
        _spinor_add_f(*_SPINOR_PTR(r),*_SPINOR_PTR(s1),*_SPINOR_PTR(s2));
    }
})

/* r=s1-s2 */
_FUNC(void, spinor_field_sub, (_SPINOR_FIELD_TYPE *r, _SPINOR_FIELD_TYPE *s1, _SPINOR_FIELD_TYPE *s2))
_BODY({
    _THREE_SPINORS_FOR(s1,s2,r) {
        _spinor_sub_f(*_SPINOR_PTR(r),*_SPINOR_PTR(s1),*_SPINOR_PTR(s2));
    }
})

/* s1+=s2 */
_FUNC(void, spinor_field_add_assign, (_SPINOR_FIELD_TYPE *s1, _SPINOR_FIELD_TYPE *s2))
_BODY({
    _TWO_SPINORS_FOR(s1,s2) {
        _spinor_add_assign_f(*_SPINOR_PTR(s1),*_SPINOR_PTR(s2));
    }
})

/* s1-=s2 */
_FUNC(void, spinor_field_sub_assign, (_SPINOR_FIELD_TYPE *s1, _SPINOR_FIELD_TYPE *s2))
_BODY({
    _TWO_SPINORS_FOR(s1,s2) {
        _spinor_sub_assign_f(*_SPINOR_PTR(s1),*_SPINOR_PTR(s2));
    }
})

/* s1=0 */
_FUNC(void, spinor_field_zero, (_SPINOR_FIELD_TYPE *s1))
_BODY({
    _ONE_SPINOR_FOR(s1) {
        _spinor_zero_f(*_SPINOR_PTR(s1));
    }
})

/* s1=-s2 */
_FUNC(void, spinor_field_minus, (_SPINOR_FIELD_TYPE *s1, _SPINOR_FIELD_TYPE *s2))
_BODY({
    _TWO_SPINORS_FOR(s1,s2) {
        _spinor_minus_f(*_SPINOR_PTR(s1),*_SPINOR_PTR(s2));
    }
})

/* s1=r1*s2+r2*s3 */
_FUNC(void, spinor_field_lc, (_SPINOR_FIELD_TYPE *s1, _REAL r1, _SPINOR_FIELD_TYPE *s2, _REAL r2, _SPINOR_FIELD_TYPE *s3))
_BODY({
    _THREE_SPINORS_FOR(s1,s2,s3) {
        _spinor_lc_f(*_SPINOR_PTR(s1),r1,*_SPINOR_PTR(s2),r2,*_SPINOR_PTR(s3));
    }
})

/* s1+=r1*s2+r2*s3 */
_FUNC(void, spinor_field_lc_add_assign, (_SPINOR_FIELD_TYPE *s1, _REAL r1, _SPINOR_FIELD_TYPE *s2, _REAL r2, _SPINOR_FIELD_TYPE *s3))
_BODY({
    _THREE_SPINORS_FOR(s1,s2,s3) {
        _spinor_lc_add_assign_f(*_SPINOR_PTR(s1),r1,*_SPINOR_PTR(s2),r2,*_SPINOR_PTR(s3));
    }
})

/* s1=c1*s2+c2*s3 c1, c2 complex*/
_FUNC(void, spinor_field_clc, (_SPINOR_FIELD_TYPE *s1, _COMPLEX c1, _SPINOR_FIELD_TYPE *s2, _COMPLEX c2, _SPINOR_FIELD_TYPE *s3))
_BODY({
    _THREE_SPINORS_FOR(s1,s2,s3) {
        _spinor_clc_f(*_SPINOR_PTR(s1),c1,*_SPINOR_PTR(s2),c2,*_SPINOR_PTR(s3));
    }
})

/* s1+=c1*s2+c2*s3 c1, c2 complex*/
_FUNC(void, spinor_field_clc_add_assign, (_SPINOR_FIELD_TYPE *s1, _COMPLEX c1, _SPINOR_FIELD_TYPE *s2, _COMPLEX c2, _SPINOR_FIELD_TYPE *s3))
_BODY({
    _THREE_SPINORS_FOR(s1,s2,s3) {
        _spinor_clc_add_assign_f(*_SPINOR_PTR(s1),c1,*_SPINOR_PTR(s2),c2,*_SPINOR_PTR(s3));
    }
})

/* s1=g5*s2  */
_FUNC(void, spinor_field_g5, (_SPINOR_FIELD_TYPE *s1, _SPINOR_FIELD_TYPE *s2))
_BODY({
    _TWO_SPINORS_FOR(s1,s2) {
        _spinor_g5_f(*_SPINOR_PTR(s1),*_SPINOR_PTR(s2));
    }
})

/* s1=g5*s1  */
_FUNC(void, spinor_field_g5_assign, (_SPINOR_FIELD_TYPE *s1))
_BODY({
    _ONE_SPINOR_FOR(s1) {
        _spinor_g5_assign_f(*_SPINOR_PTR(s1));
    }
})

/* s1=g0*s2  */
_FUNC(void, spinor_field_g0, (_SPINOR_FIELD_TYPE *s1, _SPINOR_FIELD_TYPE *s2))
_BODY({
    _TWO_SPINORS_FOR(s1,s2) {
        _spinor_g0_f(*_SPINOR_PTR(s1),*_SPINOR_PTR(s2));
    }
})

/* s1=g1*s2  */
_FUNC(void, spinor_field_g1, (_SPINOR_FIELD_TYPE *s1, _SPINOR_FIELD_TYPE *s2))
_BODY({
    _TWO_SPINORS_FOR(s1,s2) {
        _spinor_g1_f(*_SPINOR_PTR(s1),*_SPINOR_PTR(s2));
    }
})

/* s1=g2*s2  */
_FUNC(void, spinor_field_g2, (_SPINOR_FIELD_TYPE *s1, _SPINOR_FIELD_TYPE *s2))
_BODY({
    _TWO_SPINORS_FOR(s1,s2) {
        _spinor_g2_f(*_SPINOR_PTR(s1),*_SPINOR_PTR(s2));
    }
})

/* s1=g3*s2  */
_FUNC(void, spinor_field_g3, (_SPINOR_FIELD_TYPE *s1, _SPINOR_FIELD_TYPE *s2))
_BODY({
    _TWO_SPINORS_FOR(s1,s2) {
        _spinor_g3_f(*_SPINOR_PTR(s1),*_SPINOR_PTR(s2));
    }
})

/* tools per eva.c  */
_FUNC(void, spinor_field_lc1, (_REAL c1, _SPINOR_FIELD_TYPE *s1, _SPINOR_FIELD_TYPE *s2))
_BODY({
    _TWO_SPINORS_FOR(s1,s2) {
        _spinor_mul_add_assign_f(*_SPINOR_PTR(s1),c1,*_SPINOR_PTR(s2));
    }
})

_FUNC(void, spinor_field_lc2, (_REAL c1, _REAL c2, _SPINOR_FIELD_TYPE *s1, _SPINOR_FIELD_TYPE *s2))
_BODY({
    _TWO_SPINORS_FOR(s1,s2) {
        _spinor_lc_f(*_SPINOR_PTR(s1),c1,*_SPINOR_PTR(s1),c2,*_SPINOR_PTR(s2));
    }
})

_FUNC(void, spinor_field_lc3, (_REAL c1, _REAL c2, _SPINOR_FIELD_TYPE *s1, _SPINOR_FIELD_TYPE *s2, _SPINOR_FIELD_TYPE *s3))
_BODY({
    _REAL cc1=-c1;
    _REAL cc2=-c2;
    /* c1=-c1; c2=-c2; */
    _THREE_SPINORS_FOR(s1,s2,s3) {
        _spinor_lc_add_assign_f(*_SPINOR_PTR(s3),cc1,*_SPINOR_PTR(s1),cc2,*_SPINOR_PTR(s2));
        _spinor_minus_f(*_SPINOR_PTR(s3),*_SPINOR_PTR(s3));
    }
})

<<<<<<< HEAD
#ifdef __cplusplus
    }
#endif
=======
>>>>>>> remotes/upstream/HiRep-CUDA
