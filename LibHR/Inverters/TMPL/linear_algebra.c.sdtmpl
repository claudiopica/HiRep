/***************************************************************************\
* Copyright (c) 2008, Claudio Pica and Agostino Patella                     *   
* All rights reserved.                                                      * 
\***************************************************************************/

#include "communications.h"

/* s1=s2 */
void _FUNC(spinor_field_copy)(_SPINOR_FIELD_TYPE *s1, _SPINOR_FIELD_TYPE *s2) {
	_TWO_SPINORS_MATCHING(s1,s2);
	memcpy(s1->ptr,s2->ptr,s1->type->gsize_spinor*sizeof(suNf_spinor));
}

/* Re <s1,s2> */
double _FUNC(spinor_field_prod_re)(_SPINOR_FIELD_TYPE *s1, _SPINOR_FIELD_TYPE *s2)
{
    static double res;
_OMP_PRAGMA ( single )
    {
      res = 0.;
    }

	_TWO_SPINORS_FOR_SUM(s1,s2,res) {
    _REAL prod;
		_spinor_prod_re_f(prod,*_SPINOR_PTR(s1),*_SPINOR_PTR(s2));
		res+=(double)prod;
	}
#ifdef WITH_MPI
	global_sum(&res,1);
#endif
	return res;
}

/* Im <s1,s2> */
double _FUNC(spinor_field_prod_im)(_SPINOR_FIELD_TYPE *s1, _SPINOR_FIELD_TYPE *s2)
{
	static double res;
_OMP_PRAGMA ( single )
    {
      res = 0.;
    }
   
   _TWO_SPINORS_FOR_SUM(s1,s2,res) {
     _REAL prod;
     _spinor_prod_im_f(prod,*_SPINOR_PTR(s1),*_SPINOR_PTR(s2));
     res+=(double)prod;
   }
#ifdef WITH_MPI
	global_sum(&res,1);
#endif
   return res;
}

/* <s1,s2> */
hr_complex _FUNC(spinor_field_prod)(_SPINOR_FIELD_TYPE *s1, _SPINOR_FIELD_TYPE *s2)
{

    static hr_complex res;
_OMP_PRAGMA ( single )
    {
      _complex_0(res);
    }
  
  _TWO_SPINORS_FOR_SUM(s1,s2,res) {
    _COMPLEX loc_res; //needed for OMP threads
    _spinor_prod_f(loc_res,*_SPINOR_PTR(s1),*_SPINOR_PTR(s2));
    _complex_add_assign(res,loc_res);
  }
#ifdef WITH_MPI
	global_sum((double*)&res,2);
#endif
  return res;
}

/* Re <g5*s1,s2> */
double _FUNC(spinor_field_g5_prod_re)(_SPINOR_FIELD_TYPE *s1, _SPINOR_FIELD_TYPE *s2)
{
    static double res;
_OMP_PRAGMA ( single )
    {
      res = 0.;
    }

   _TWO_SPINORS_FOR_SUM(s1,s2,res) {
     _REAL prod;
		 _spinor_g5_prod_re_f(prod,*_SPINOR_PTR(s1),*_SPINOR_PTR(s2));
     res+=(double)prod;
   }
#ifdef WITH_MPI
	global_sum(&res,1);
#endif
   return res;
}

/* Im <g5*s1,s2> */
double _FUNC(spinor_field_g5_prod_im)(_SPINOR_FIELD_TYPE *s1, _SPINOR_FIELD_TYPE *s2)
{
    static double res;
_OMP_PRAGMA ( single )
    {
      res = 0.;
    }

   _TWO_SPINORS_FOR_SUM(s1,s2,res) {
     _REAL prod;
		 _spinor_g5_prod_im_f(prod,*_SPINOR_PTR(s1),*_SPINOR_PTR(s2));
     res+=(double)prod;
   }
#ifdef WITH_MPI
	global_sum(&res,1);
#endif
   return res;
}

/* Re <s1,s1> */
double _FUNC(spinor_field_sqnorm)(_SPINOR_FIELD_TYPE *s1)
{
    static double res;
_OMP_PRAGMA ( single )
    {
      res = 0.;
    }

   _ONE_SPINOR_FOR_SUM(s1,res) {
     _REAL prod;
		 _spinor_prod_re_f(prod,*_SPINOR_PTR(s1),*_SPINOR_PTR(s1));
     res+=(double)prod;
   }
#ifdef WITH_MPI
_OMP_PRAGMA ( master )
{
	global_sum(&res,1);
}
_OMP_BARRIER
#endif

   return res;
}

/* s1+=r*s2 r real */
void _FUNC(spinor_field_mul_add_assign)(_SPINOR_FIELD_TYPE *s1, _REAL r, _SPINOR_FIELD_TYPE *s2)
{
  //_REAL rr=r;
  
   _TWO_SPINORS_FOR(s1,s2) {
      _spinor_mul_add_assign_f(*_SPINOR_PTR(s1),r,*_SPINOR_PTR(s2));
   }
}

/* s1+=c*s2 c complex */
void _FUNC(spinor_field_mulc_add_assign)(_SPINOR_FIELD_TYPE *s1, _COMPLEX c, _SPINOR_FIELD_TYPE *s2)
{
   //_COMPLEX c1=c;
   //c1.re=(_REAL)c.re; c1.im=(_REAL)c.im;
   
   _TWO_SPINORS_FOR(s1,s2) {
      _spinor_mulc_add_assign_f(*_SPINOR_PTR(s1),c,*_SPINOR_PTR(s2));
   }
}

/* s1+=c*g5*s2 c complex */
void _FUNC(spinor_field_g5_mulc_add_assign)(_SPINOR_FIELD_TYPE *s1, _COMPLEX c, _SPINOR_FIELD_TYPE *s2)
{
   //_COMPLEX c1=c;
   //c1.re=(_REAL)c.re; c1.im=(_REAL)c.im;
  _SPINOR_TYPE tmp;
   _TWO_SPINORS_FOR(s1,s2) {
     _spinor_g5_f(tmp,*_SPINOR_PTR(s2));
     _spinor_mulc_add_assign_f(*_SPINOR_PTR(s1),c,tmp);
   }
}


/* s1=r*s2 */
void _FUNC(spinor_field_mul)(_SPINOR_FIELD_TYPE *s1, _REAL r, _SPINOR_FIELD_TYPE *s2)
{
  //_REAL rr=(_REAL)r;
  
   _TWO_SPINORS_FOR(s1,s2) {
      _spinor_mul_f(*_SPINOR_PTR(s1),r,*_SPINOR_PTR(s2));
   }
}

/* s1=c*s2 c complex */
void _FUNC(spinor_field_mulc)(_SPINOR_FIELD_TYPE *s1, _COMPLEX c, _SPINOR_FIELD_TYPE *s2)
{
   //_COMPLEX c1;
   //c1.re=(_REAL)c.re; c1.im=(_REAL)c.im;
   
   _TWO_SPINORS_FOR(s1,s2) {
      _spinor_mulc_f(*_SPINOR_PTR(s1),c,*_SPINOR_PTR(s2));
   }
}

/* r=s1+s2 */
void _FUNC(spinor_field_add)(_SPINOR_FIELD_TYPE *r, _SPINOR_FIELD_TYPE *s1, _SPINOR_FIELD_TYPE *s2)
{
  
   _THREE_SPINORS_FOR(s1,s2,r) {
      _spinor_add_f(*_SPINOR_PTR(r),*_SPINOR_PTR(s1),*_SPINOR_PTR(s2));
    }
}

/* r=s1-s2 */
void _FUNC(spinor_field_sub)(_SPINOR_FIELD_TYPE *r, _SPINOR_FIELD_TYPE *s1, _SPINOR_FIELD_TYPE *s2)
{
  
   _THREE_SPINORS_FOR(s1,s2,r) {
      _spinor_sub_f(*_SPINOR_PTR(r),*_SPINOR_PTR(s1),*_SPINOR_PTR(s2));
   }
}

/* s1+=s2 */
void _FUNC(spinor_field_add_assign)(_SPINOR_FIELD_TYPE *s1, _SPINOR_FIELD_TYPE *s2)
{
  
   _TWO_SPINORS_FOR(s1,s2) {
      _spinor_add_assign_f(*_SPINOR_PTR(s1),*_SPINOR_PTR(s2));
   }
}

/* s1-=s2 */
void _FUNC(spinor_field_sub_assign)(_SPINOR_FIELD_TYPE *s1, _SPINOR_FIELD_TYPE *s2)
{
   _TWO_SPINORS_FOR(s1,s2) {
      _spinor_sub_assign_f(*_SPINOR_PTR(s1),*_SPINOR_PTR(s2));
   }
}

/* s1=0 */
void _FUNC(spinor_field_zero)(_SPINOR_FIELD_TYPE *s1)
{
   _ONE_SPINOR_FOR(s1) {
      _spinor_zero_f(*_SPINOR_PTR(s1));
  }
}

/* s1=-s2 */
void _FUNC(spinor_field_minus)(_SPINOR_FIELD_TYPE *s1, _SPINOR_FIELD_TYPE *s2)
{
  
   _TWO_SPINORS_FOR(s1,s2) {
      _spinor_minus_f(*_SPINOR_PTR(s1),*_SPINOR_PTR(s2));
   }
}

/* s1=r1*s2+r2*s3 */
void _FUNC(spinor_field_lc)(_SPINOR_FIELD_TYPE *s1, _REAL r1, _SPINOR_FIELD_TYPE *s2, _REAL r2, _SPINOR_FIELD_TYPE *s3)
{
  //_REAL rr1=(_REAL)r1;
  //_REAL rr2=(_REAL)r2;
  
   _THREE_SPINORS_FOR(s1,s2,s3) {
     _spinor_lc_f(*_SPINOR_PTR(s1),r1,*_SPINOR_PTR(s2),r2,*_SPINOR_PTR(s3));
   }
}

/* s1+=r1*s2+r2*s3 */
void _FUNC(spinor_field_lc_add_assign)(_SPINOR_FIELD_TYPE *s1, _REAL r1, _SPINOR_FIELD_TYPE *s2, _REAL r2, _SPINOR_FIELD_TYPE *s3)
{
  //_REAL rr1=(_REAL)r1;
  //_REAL rr2=(_REAL)r2;
  
   _THREE_SPINORS_FOR(s1,s2,s3) {
     _spinor_lc_add_assign_f(*_SPINOR_PTR(s1),r1,*_SPINOR_PTR(s2),r2,*_SPINOR_PTR(s3));
   }
}

/* s1=cd1*s2+cd2*s3 cd1, cd2 complex*/
void _FUNC(spinor_field_clc)(_SPINOR_FIELD_TYPE *s1, _COMPLEX cd1, _SPINOR_FIELD_TYPE *s2, _COMPLEX cd2, _SPINOR_FIELD_TYPE *s3)
{
   //_COMPLEX c1, c2;
   //c1.re=(_REAL)cd1.re; c1.im=(_REAL)cd1.im;
   //c2.re=(_REAL)cd2.re; c2.im=(_REAL)cd2.im;
   
   _THREE_SPINORS_FOR(s1,s2,s3) {
     _spinor_clc_f(*_SPINOR_PTR(s1),cd1,*_SPINOR_PTR(s2),cd2,*_SPINOR_PTR(s3));
   }
}

/* s1+=cd1*s2+cd2*s3 cd1, cd2 complex*/
void _FUNC(spinor_field_clc_add_assign)(_SPINOR_FIELD_TYPE *s1, _COMPLEX cd1, _SPINOR_FIELD_TYPE *s2, _COMPLEX cd2, _SPINOR_FIELD_TYPE *s3)
{
   //_COMPLEX c1, c2;
   //c1.re=(_REAL)cd1.re; c1.im=(_REAL)cd1.im;
   //c2.re=(_REAL)cd2.re; c2.im=(_REAL)cd2.im;
   
   _THREE_SPINORS_FOR(s1,s2,s3) {
     _spinor_clc_add_assign_f(*_SPINOR_PTR(s1),cd1,*_SPINOR_PTR(s2),cd2,*_SPINOR_PTR(s3));
   }
}

/* s1=g5*s2  */
void _FUNC(spinor_field_g5)(_SPINOR_FIELD_TYPE *s1, _SPINOR_FIELD_TYPE *s2)
{
   _TWO_SPINORS_FOR(s1,s2) {
     _spinor_g5_f(*_SPINOR_PTR(s1),*_SPINOR_PTR(s2));
   }
}

/* s1=g5*s1  */
void _FUNC(spinor_field_g5_assign)(_SPINOR_FIELD_TYPE *s1)
{
   _ONE_SPINOR_FOR(s1) {
     _spinor_g5_assign_f(*_SPINOR_PTR(s1));
   }
}

/* s1=g0*s2  */
void _FUNC(spinor_field_g0)(_SPINOR_FIELD_TYPE *s1, _SPINOR_FIELD_TYPE *s2)
{
   _TWO_SPINORS_FOR(s1,s2) {
     _spinor_g0_f(*_SPINOR_PTR(s1),*_SPINOR_PTR(s2));
   }
}

/* s1=g1*s2  */
void _FUNC(spinor_field_g1)(_SPINOR_FIELD_TYPE *s1, _SPINOR_FIELD_TYPE *s2)
{
   _TWO_SPINORS_FOR(s1,s2) {
     _spinor_g1_f(*_SPINOR_PTR(s1),*_SPINOR_PTR(s2));
   }
}

/* s1=g2*s2  */
void _FUNC(spinor_field_g2)(_SPINOR_FIELD_TYPE *s1, _SPINOR_FIELD_TYPE *s2)
{
   _TWO_SPINORS_FOR(s1,s2) {
     _spinor_g2_f(*_SPINOR_PTR(s1),*_SPINOR_PTR(s2));
   }
}

/* s1=g3*s2  */
void _FUNC(spinor_field_g3)(_SPINOR_FIELD_TYPE *s1, _SPINOR_FIELD_TYPE *s2)
{
   _TWO_SPINORS_FOR(s1,s2) {
     _spinor_g3_f(*_SPINOR_PTR(s1),*_SPINOR_PTR(s2));
   }
}



/* tools per eva.c  */
void _FUNC(spinor_field_lc1)(_REAL c1, _SPINOR_FIELD_TYPE *s1, _SPINOR_FIELD_TYPE *s2)
{
  //_REAL cc1=(_REAL)c1;
  
   _TWO_SPINORS_FOR(s1,s2) {
       _spinor_mul_add_assign_f(*_SPINOR_PTR(s1),c1,*_SPINOR_PTR(s2));
   }
}


void _FUNC(spinor_field_lc2)(_REAL c1, _REAL c2, _SPINOR_FIELD_TYPE *s1, _SPINOR_FIELD_TYPE *s2)
{
  //_REAL cc1=(_REAL)c1;
  //_REAL cc2=(_REAL)c2;
  
   _TWO_SPINORS_FOR(s1,s2) {
       _spinor_lc_f(*_SPINOR_PTR(s1),c1,*_SPINOR_PTR(s1),c2,*_SPINOR_PTR(s2));
   }
}


void _FUNC(spinor_field_lc3)(_REAL c1, _REAL c2, _SPINOR_FIELD_TYPE *s1, _SPINOR_FIELD_TYPE *s2, _SPINOR_FIELD_TYPE *s3)
{
  _REAL cc1=-c1;
  _REAL cc2=-c2;
  
   /* c1=-c1; c2=-c2; */
   
   _THREE_SPINORS_FOR(s1,s2,s3) {
      _spinor_lc_add_assign_f(*_SPINOR_PTR(s3),cc1,*_SPINOR_PTR(s1),cc2,*_SPINOR_PTR(s2));
      _spinor_minus_f(*_SPINOR_PTR(s3),*_SPINOR_PTR(s3));
   }
}

