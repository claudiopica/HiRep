/***************************************************************************\
* Copyright (c) 2008-2023                                                   *
* Claudio Pica, Ari Hietanen, Ulrik SÃ¸ndergaard, Sofie Martins              *
* All rights reserved.                                                      *
\***************************************************************************/

#include "../linear_algebra_gpu_kernels.hpp"
#include "utils.h"

// Error checking
#if !defined(_FIELD_TYPE)
#error Missing _FIELD_TYPE in linear_algebra_gpu.cu
#endif
#if !defined(_FIELD_DIM)
#error Missing _FIELD_DIM in linear_algebra_gpu.cu
#endif
#if !defined(_SITE_TYPE)
#error Missing _SITE_TYPE in linear_algebra_gpu.cu
#endif
#if !defined(_REAL)
#error Missing _REAL in linear_algebra_gpu.cu
#endif
#if !defined(_COMPLEX)
#error Missing _COMPLEX in linear_algebra_gpu.cu
#endif


// TODO: gsize_gauge or gsize_spinor
_DECLARE_LINEAR_ALGEBRA_GPU_OP(void, copy, (_FIELD_TYPE * s1, _FIELD_TYPE *s2), (s1, s2)) {
    _TWO_SPINORS_MATCHING(s1, s2);
    _PIECE_FOR(s2->type, ixp) {
        const int block_size = s1->type->master_end[ixp] - s1->type->master_start[ixp] + 1;

        // We need an adjusted block size here to set the full block to zero including
        // the padding that is there to avoid segfaults for 32-site striding
        int block_size_adjusted = block_size;
        if (block_size % THREADSIZE != 0) {
            block_size_adjusted = ((block_size / THREADSIZE) + 1) * THREADSIZE;
        }
        cudaMemcpy(_GPU_DFIELD_BLK(s1, ixp, _FIELD_DIM), _GPU_DFIELD_BLK(s2, ixp, _FIELD_DIM), block_size_adjusted * _FIELD_DIM * sizeof(_SITE_TYPE), cudaMemcpyDeviceToDevice);
    }
}

/* s1=0 */
_DECLARE_LINEAR_ALGEBRA_GPU_OP(void, zero, (_FIELD_TYPE * s1), (s1)) {
    _PIECE_FOR(s1->type, ixp) {
        const int block_size = s1->type->master_end[ixp] - s1->type->master_start[ixp] + 1;
        int block_size_adjusted = block_size;
        if (block_size % THREADSIZE != 0) {
            block_size_adjusted = ((block_size / THREADSIZE) + 1) * THREADSIZE;
        }
        cudaMemset(_GPU_DFIELD_BLK(s1, ixp, _FIELD_DIM), 0, block_size_adjusted * _FIELD_DIM * sizeof(_SITE_TYPE));
    }
}

//user interface macros
#undef _FIELD_TYPE
#undef _SITE_TYPE
#undef _REAL
#undef _COMPLEX
#undef _FIELD_DIM
#undef _ISREAL
