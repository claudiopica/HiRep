/***************************************************************************\
* Copyright (c) 2008-2023                                                   *
* Claudio Pica, Ari Hietanen, Ulrik SÃ¸ndergaard, Sofie Martins              *
* All rights reserved.                                                      *
\***************************************************************************/

#include "../linear_algebra_gpu_kernels.hpp"

// Error checking
#if !defined(_FIELD_TYPE)
#error Missing _FIELD_TYPE in linear_algebra_gpu.cu
#endif
#if !defined(_FIELD_DIM)
#error Missing _FIELD_DIM in linear_algebra_gpu.cu
#endif
#if !defined(_SITE_TYPE)
#error Missing _SITE_TYPE in linear_algebra_gpu.cu
#endif
#if !defined(_REAL)
#error Missing _REAL in linear_algebra_gpu.cu
#endif
#if !defined(_COMPLEX)
#error Missing _COMPLEX in linear_algebra_gpu.cu
#endif
#if !defined(_ISREAL)
#error Missing _ISREAL in linear_algebra_gpu.cu
#endif

/* s1+=r*s2 r real */
_DECLARE_LINEAR_ALGEBRA_GPU_OP(void, mul_add_assign, (_FIELD_TYPE * s1, _REAL r, _FIELD_TYPE *s2), (s1, r, s2)) {
    _TWO_SPINORS_MATCHING(s1, s2);
    _CUDA_FOR(s1, ixp,
              (mul_add_assign_gpu<_FIELD_DIM><<<grid_size, BLOCK_SIZE_LINEAR_ALGEBRA>>>(_GPU_DFIELD_BLK(s1, ixp, _FIELD_DIM), r,
                                                                                         _GPU_DFIELD_BLK(s2, ixp, _FIELD_DIM), N)););
}

/* s1+=c*s2 c complex */
_DECLARE_LINEAR_ALGEBRA_GPU_OP(void, mulc_add_assign, (_FIELD_TYPE * s1, _COMPLEX c, _FIELD_TYPE *s2), (s1, c, s2)) {
    #if !_ISREAL
    _TWO_SPINORS_MATCHING(s1, s2);
    _CUDA_FOR(s1, ixp,
              (mulc_add_assign_gpu<_FIELD_DIM, _REAL>
               <<<grid_size, BLOCK_SIZE_LINEAR_ALGEBRA>>>(_GPU_DFIELD_BLK(s1, ixp, _FIELD_DIM), c, _GPU_DFIELD_BLK(s2, ixp, _FIELD_DIM), N)););
    #else
        error(1, 1, __func__, "Calling complex multiplication for real field.\n");
    #endif
}

/* s1=r*s2 */
_DECLARE_LINEAR_ALGEBRA_GPU_OP(void, mul, (_FIELD_TYPE * s1, _REAL r, _FIELD_TYPE *s2), (s1, r, s2)) {
    _TWO_SPINORS_MATCHING(s1, s2);
    _CUDA_FOR(s1, ixp,
              (mul_gpu<_FIELD_DIM><<<grid_size, BLOCK_SIZE_LINEAR_ALGEBRA>>>(_GPU_DFIELD_BLK(s1, ixp, _FIELD_DIM), r,
                                                                              _GPU_DFIELD_BLK(s2, ixp, _FIELD_DIM), N)););
}

/* s1=c*s2 c complex */
_DECLARE_LINEAR_ALGEBRA_GPU_OP(void, mulc, (_FIELD_TYPE * s1, _COMPLEX c, _FIELD_TYPE *s2), (s1, c, s2)) {
    #if !_ISREAL 
    _TWO_SPINORS_MATCHING(s1, s2);
    _CUDA_FOR(s1, ixp,
              (mulc_gpu<_FIELD_DIM, _REAL>
               <<<grid_size, BLOCK_SIZE_LINEAR_ALGEBRA>>>(_GPU_DFIELD_BLK(s1, ixp, _FIELD_DIM), c, _GPU_DFIELD_BLK(s2, ixp, _FIELD_DIM), N)););
    #else
        error(1, 1, __func__, "Calling complex multiplication for real field.\n");
    #endif
}

/* r=s1+s2 */
_DECLARE_LINEAR_ALGEBRA_GPU_OP(void, add, (_FIELD_TYPE * r, _FIELD_TYPE *s1, _FIELD_TYPE *s2), (r, s1, s2)) {
    _TWO_SPINORS_MATCHING(s1, s2);
    _CUDA_FOR(s1, ixp,
              (add_gpu<_FIELD_DIM, _REAL><<<grid_size, BLOCK_SIZE_LINEAR_ALGEBRA>>>(
                  _GPU_DFIELD_BLK(r, ixp, _FIELD_DIM), _GPU_DFIELD_BLK(s1, ixp, _FIELD_DIM), _GPU_DFIELD_BLK(s2, ixp, _FIELD_DIM), N)););
}

/* r=s1-s2 */
_DECLARE_LINEAR_ALGEBRA_GPU_OP(void, sub, (_FIELD_TYPE * r, _FIELD_TYPE *s1, _FIELD_TYPE *s2), (r, s1, s2)) {
    _TWO_SPINORS_MATCHING(s1, s2);
    _CUDA_FOR(s1, ixp,
              (sub_gpu<_FIELD_DIM, _REAL><<<grid_size, BLOCK_SIZE_LINEAR_ALGEBRA>>>(
                  _GPU_DFIELD_BLK(r, ixp, _FIELD_DIM), _GPU_DFIELD_BLK(s1, ixp, _FIELD_DIM), _GPU_DFIELD_BLK(s2, ixp, _FIELD_DIM), N)););
}

/* s1+=s2 */
_DECLARE_LINEAR_ALGEBRA_GPU_OP(void, add_assign, (_FIELD_TYPE * s1, _FIELD_TYPE *s2), (s1, s2)) {
    _TWO_SPINORS_MATCHING(s1, s2);
    _CUDA_FOR(s1, ixp,
              (add_assign_gpu<_FIELD_DIM, _REAL>
               <<<grid_size, BLOCK_SIZE_LINEAR_ALGEBRA>>>(_GPU_DFIELD_BLK(s1, ixp, _FIELD_DIM), _GPU_DFIELD_BLK(s2, ixp, _FIELD_DIM), N)););
}

/* s1-=s2 */
_DECLARE_LINEAR_ALGEBRA_GPU_OP(void, sub_assign, (_FIELD_TYPE * s1, _FIELD_TYPE *s2), (s1, s2)) {
    _TWO_SPINORS_MATCHING(s1, s2);
    _CUDA_FOR(s1, ixp,
              (sub_assign_gpu<_FIELD_DIM, _REAL>
               <<<grid_size, BLOCK_SIZE_LINEAR_ALGEBRA>>>(_GPU_DFIELD_BLK(s1, ixp, _FIELD_DIM), _GPU_DFIELD_BLK(s2, ixp, _FIELD_DIM), N)););
}

/* s1=-s2 */
_DECLARE_LINEAR_ALGEBRA_GPU_OP(void, minus, (_FIELD_TYPE * s1, _FIELD_TYPE *s2), (s1, s2)) {
    _TWO_SPINORS_MATCHING(s1, s2);
    _CUDA_FOR(s1, ixp,
              (minus_gpu<_FIELD_DIM, _REAL>
               <<<grid_size, BLOCK_SIZE_LINEAR_ALGEBRA>>>(_GPU_DFIELD_BLK(s1, ixp, _FIELD_DIM), _GPU_DFIELD_BLK(s2, ixp, _FIELD_DIM), N)););
}