/***************************************************************************\
* Copyright (c) 2008, Agostino Patella                                      *   
* All rights reserved.                                                      * 
\***************************************************************************/

#include "suN.h"
#include "utils.h"
#include <math.h>

#if (NG!=$N$) 
#error : Mismatch between NG and ExpX_legacy!
#endif

/*
*  U = (1+i*y.sigma/4)(1-i*y.sigma/4)^{-1}
*  U = u[0] + i*u.sigma/4
*/
#ifndef WITH_QUATERNIONS
static void YtoU(double* u, double *y)
{
   double y2 = y[0]*y[0] + y[1]*y[1] +y[2]*y[2];
   double detY = 1.0 + y2/16.;
   u[0] = (1.0 - y2/16.)/detY;
   u[1] = y[0]/(2.*detY);
   u[2] = y[1]/(2.*detY);
   u[3] = y[2]/(2.*detY);
}


/*
*  Applies the SU(2) rotation defined by 
*  U = s[0] + i*s.sigma/4
*  to the (v1,v2) vector
*/
static void su2_rotate(double *s,double complex *v1,double complex *v2)
{      
   double complex z1, z2;
  z1=s[0]*(*v1)+I*s[1]*(*v2)+s[2]*(*v2)+I*s[3]*(*v1);
  z2=s[0]*(*v2)+I*s[1]*(*v1)-s[2]*(*v1)-I*s[3]*(*v2);
   (*v1)=z1;
   (*v2)=z2;
}
#endif

/*
*  Approximate 
*  V = exp(sum(A) iT(A)*h(A)*dt)
*  with a unitary matrix according to the alghorithm defined in Appendix A 
*  of https://arxiv.org/pdf/hep-lat/0409106.pdf
*  and replaces  V.U -> U
*/
/*Antonio: The lagacy functions have been left in the file for past reference, although at the moment they are not used and are meant to be removed.*/

#ifdef GAUGE_SON
void ExpX_legacy(double dt, suNg_algebra_vector *h, suNg *r)
{
	error(0==0,1,"ExpX_legacy [suN_epx.c]","This functiona has yet not been implementd for SON");
}
#else
void ExpX_legacy(double dt, suNg_algebra_vector *h, suNg *u)
{
#ifdef WITH_QUATERNIONS
suNg v_tmp, u_tmp;

u_tmp=*u;
_suNg_exp(dt,*h,v_tmp);
_suNg_times_suNg(*u,v_tmp,u_tmp);
#else //WITH_QUATERNIONS 

$GROUP::EXPX:(dt):(*h):(*u)$

#endif //WITH_QUATERNIONS
}
#endif



#define XG(m,a,b) ((m)+(a)*NG+(b))
#define XA(h,a) ((h)+(a))
#define TI(a,b) ((a)*NG+(b)-1)


void ExpX_legacy2(double dt, suNg_algebra_vector *h, suNg *u)
{
#ifdef WITH_QUATERNIONS

suNg v_tmp, u_tmp;

u_tmp=*u;
_suNg_exp(dt,*h,v_tmp);
_suNg_times_suNg(*u,v_tmp,u_tmp);

#else //WITH_QUATERNIONS 

	int i, j, k, n;
	double y[3];
	double d[NG];
	double s[NG*(NG-1)/2][4];
	double tmp;
	double *hf = (double*)h;
	double complex *uf = (double complex*)u;
	
	d[0] = 0.0;
	for(i = 1; i < NG; i++) {
		tmp = sqrt( 2./(i*(i+1)) ) * (*XA(hf,i));
		d[i] = -i *tmp;
		for(j = 0; j < i; j++)
			d[j] += tmp;
	}
	
	k = 0;
	for(j = 1; j<NG; j++) /* Aggiunto il j< testare. Claudio */
	for(i = 0; i < j; i++) {
		y[0] = dt * (*XA(hf,TI(j,i)));
		y[1] = -dt * (*XA(hf,TI(i,j)));
		y[2] = dt * (d[i]-d[j]) / NG;
		YtoU(s[k],y);
		for(n = 0; n < NG; n++)
			su2_rotate(s[k],XG(uf,i,n),XG(uf,j,n));
		k++;
	}

	k = NG*(NG-1)/2 - 1;
	for(j = NG-1; j >= 1; j--)
	for(i = j-1; i >= 0; i--) {
		for(n = 0; n < NG; n++)
			su2_rotate(s[k],XG(uf,i,n),XG(uf,j,n));
		k--;
	}

#endif //WITH_QUATERNIONS

}



