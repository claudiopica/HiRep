/***************************************************************************\
* Copyright (c) 2008, Claudio Pica and Agostino Patella                     *
* All rights reserved.                                                      *
\***************************************************************************/

// Error checking
#if !defined(_SPINOR_FIELD_TYPE)
#error Missing _SPINOR_FIELD_TYPE in linear_algebra.c
#endif
#if !defined(_SPINOR_TYPE)
#error Missing _SPINOR_TYPE in linear_algebra.c
#endif
#if !defined(_REAL)
#error Missing _REAL in linear_algebra.c
#endif
#if !defined(_COMPLEX)
#error Missing _COMPLEX in linear_algebra.c
#endif
#if !defined(_SUFFIX)
#error Missing _SUFFIX in linear_algebra.c
#endif


// Internal macro for defining generic functions and alias function pointers
#define _CONCAT(_name,_suffix) _name ## _suffix
#define _F_NAME(_name,_suffix) _CONCAT(_name,_suffix)
#define _CPU_F_NAME(_name,_suffix) _CONCAT(_name,_suffix ## _cpu)
#define _GPU_F_NAME(_name,_suffix) _CONCAT(_name,_suffix ## _gpu)
#define _CPU_FUNC_INNER(a,b,_suffix,c) a _CPU_F_NAME(b,_suffix) c
#define _GPU_FUNC_INNER(a,b,_suffix,c) a _GPU_F_NAME(b,_suffix) c
#define _PTR_FUNC_INNER(a,b,_suffix,c) a (*_F_NAME(b,_suffix)) c
#ifdef WITH_GPU
#define _FUNC(a,b,c) _PTR_FUNC_INNER(a,b,_SUFFIX,c); _CPU_FUNC_INNER(a,b,_SUFFIX,c); _GPU_FUNC_INNER(a,b,_SUFFIX,c)
#else
#define _FUNC(a,b,c) _PTR_FUNC_INNER(a,b,_SUFFIX,c); _CPU_FUNC_INNER(a,b,_SUFFIX,c)
#endif


/* s1=s2 */
_FUNC(void, spinor_field_copy, (_SPINOR_FIELD_TYPE *s1, _SPINOR_FIELD_TYPE *s2));

/* Re <s1,s2> */
_FUNC(double, spinor_field_prod_re, (_SPINOR_FIELD_TYPE *s1, _SPINOR_FIELD_TYPE *s2));

/* Im <s1,s2> */
_FUNC(double, spinor_field_prod_im, (_SPINOR_FIELD_TYPE *s1, _SPINOR_FIELD_TYPE *s2));

/* <s1,s2> */
_FUNC(hr_complex, spinor_field_prod, (_SPINOR_FIELD_TYPE *s1, _SPINOR_FIELD_TYPE *s2));

/* Re <g5*s1,s2> */
_FUNC(double, spinor_field_g5_prod_re, (_SPINOR_FIELD_TYPE *s1, _SPINOR_FIELD_TYPE *s2));

/* Im <g5*s1,s2> */
_FUNC(double, spinor_field_g5_prod_im, (_SPINOR_FIELD_TYPE *s1, _SPINOR_FIELD_TYPE *s2));

/* Re <s1,s1> */
_FUNC(double, spinor_field_sqnorm, (_SPINOR_FIELD_TYPE *s1));

/* s1+=r*s2 r real */
_FUNC(void, spinor_field_mul_add_assign, (_SPINOR_FIELD_TYPE *s1, _REAL r, _SPINOR_FIELD_TYPE *s2));

/* s1+=c*s2 c complex */
_FUNC(void, spinor_field_mulc_add_assign, (_SPINOR_FIELD_TYPE *s1, _COMPLEX c, _SPINOR_FIELD_TYPE *s2));

/* s1+=c*g5*s2 c complex */
_FUNC(void, spinor_field_g5_mulc_add_assign, (_SPINOR_FIELD_TYPE *s1, _COMPLEX c, _SPINOR_FIELD_TYPE *s2));

/* s1=r*s2 */
_FUNC(void, spinor_field_mul, (_SPINOR_FIELD_TYPE *s1, _REAL r, _SPINOR_FIELD_TYPE *s2));

/* s1=c*s2 c complex */
_FUNC(void, spinor_field_mulc, (_SPINOR_FIELD_TYPE *s1, _COMPLEX c, _SPINOR_FIELD_TYPE *s2));

/* r=s1+s2 */
_FUNC(void, spinor_field_add, (_SPINOR_FIELD_TYPE *r, _SPINOR_FIELD_TYPE *s1, _SPINOR_FIELD_TYPE *s2));

/* r=s1-s2 */
_FUNC(void, spinor_field_sub, (_SPINOR_FIELD_TYPE *r, _SPINOR_FIELD_TYPE *s1, _SPINOR_FIELD_TYPE *s2));

/* s1+=s2 */
_FUNC(void, spinor_field_add_assign, (_SPINOR_FIELD_TYPE *s1, _SPINOR_FIELD_TYPE *s2));

/* s1-=s2 */
_FUNC(void, spinor_field_sub_assign, (_SPINOR_FIELD_TYPE *s1, _SPINOR_FIELD_TYPE *s2));

/* s1=0 */
_FUNC(void, spinor_field_zero, (_SPINOR_FIELD_TYPE *s1));

/* s1=-s2 */
_FUNC(void, spinor_field_minus, (_SPINOR_FIELD_TYPE *s1, _SPINOR_FIELD_TYPE *s2));

/* s1=r1*s2+r2*s3 */
_FUNC(void, spinor_field_lc, (_SPINOR_FIELD_TYPE *s1, _REAL r1, _SPINOR_FIELD_TYPE *s2, _REAL r2, _SPINOR_FIELD_TYPE *s3));

/* s1+=r1*s2+r2*s3 */
_FUNC(void, spinor_field_lc_add_assign, (_SPINOR_FIELD_TYPE *s1, _REAL r1, _SPINOR_FIELD_TYPE *s2, _REAL r2, _SPINOR_FIELD_TYPE *s3));

/* s1=c1*s2+c2*s3 c1, c2 complex*/
_FUNC(void, spinor_field_clc, (_SPINOR_FIELD_TYPE *s1, _COMPLEX c1, _SPINOR_FIELD_TYPE *s2, _COMPLEX c2, _SPINOR_FIELD_TYPE *s3));

/* s1+=c1*s2+c2*s3 c1, c2 complex*/
_FUNC(void, spinor_field_clc_add_assign, (_SPINOR_FIELD_TYPE *s1, _COMPLEX c1, _SPINOR_FIELD_TYPE *s2, _COMPLEX c2, _SPINOR_FIELD_TYPE *s3));

/* s1=g5*s2  */
_FUNC(void, spinor_field_g5, (_SPINOR_FIELD_TYPE *s1, _SPINOR_FIELD_TYPE *s2));

/* s1=g5*s1  */
_FUNC(void, spinor_field_g5_assign, (_SPINOR_FIELD_TYPE *s1));

/* s1=g0*s2  */
_FUNC(void, spinor_field_g0, (_SPINOR_FIELD_TYPE *s1, _SPINOR_FIELD_TYPE *s2));

/* s1=g1*s2  */
_FUNC(void, spinor_field_g1, (_SPINOR_FIELD_TYPE *s1, _SPINOR_FIELD_TYPE *s2));

/* s1=g2*s2  */
_FUNC(void, spinor_field_g2, (_SPINOR_FIELD_TYPE *s1, _SPINOR_FIELD_TYPE *s2));

/* s1=g3*s2  */
_FUNC(void, spinor_field_g3, (_SPINOR_FIELD_TYPE *s1, _SPINOR_FIELD_TYPE *s2));

/* tools per eva.c  */
_FUNC(void, spinor_field_lc1, (_REAL c1, _SPINOR_FIELD_TYPE *s1, _SPINOR_FIELD_TYPE *s2));

_FUNC(void, spinor_field_lc2, (_REAL c1, _REAL c2, _SPINOR_FIELD_TYPE *s1, _SPINOR_FIELD_TYPE *s2));

_FUNC(void, spinor_field_lc3, (_REAL c1, _REAL c2, _SPINOR_FIELD_TYPE *s1, _SPINOR_FIELD_TYPE *s2, _SPINOR_FIELD_TYPE *s3));


//undefine macros
//internal macros
#undef _CONCAT
#undef _F_NAME
#undef _CPU_F_NAME
#undef _GPU_F_NAME
#undef _CPU_FUNC_INNER
#undef _GPU_FUNC_INNER
#undef _PTR_FUNC_INNER
#undef _FUNC

//user interface macros
#undef _SPINOR_FIELD_TYPE
#undef _SPINOR_TYPE
#undef _REAL
#undef _COMPLEX
#undef _SUFFIX
