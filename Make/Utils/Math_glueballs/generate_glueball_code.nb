(* Content-type: application/vnd.wolfram.mathematica *)

(*** Wolfram Notebook File ***)
(* http://www.wolfram.com/nb *)

(* CreatedBy='Mathematica 11.3' *)

(*CacheID: 234*)
(* Internal cache information:
NotebookFileLineBreakTest
NotebookFileLineBreakTest
NotebookDataPosition[       158,          7]
NotebookDataLength[     86612,       1760]
NotebookOptionsPosition[     39427,        896]
NotebookOutlinePosition[     85766,       1751]
CellTagsIndexPosition[     85723,       1748]
WindowFrame->Normal*)

(* Beginning of Notebook Content *)
Notebook[{

Cell[CellGroupData[{
Cell["Interface for the creation of the glueball code for HiRep", "Title",
 CellChangeTimes->{{3.819533968434327*^9, 3.819534023553738*^9}, 
   3.86228399845367*^9},ExpressionUUID->"be4335ef-abd8-40da-b508-\
198e7f31797a"],

Cell["\<\
Instructions:
1) The res[i] represents the operators already generated, more can be added \
assuming that each of them represents a closed path.
2) To add 1tr operators use \
Add1trOpCorrelators[px,py,pz,irrep,ireep_ev,charge,path]
3) To add 2tr operators (2 Tr combination made of Op1 and Op2) use \
Add2trOpCorrelators[p1x,p1y,p1z,irrep1,charge1,path1,p2x,p2y,p2z,irrep2,\
charge2,path2, poutx,pouty,poutz,irrep_out,irrep_out_ev];
4) As last step use GenerateCcode[] to produce the C code\
\>", "Subtitle",
 CellChangeTimes->{{3.819534032752301*^9, 
  3.819534330484164*^9}},ExpressionUUID->"bd5946f4-a26e-4333-8f76-\
4023cae136b8"],

Cell[BoxData[
 RowBox[{
  RowBox[{"SetDirectory", "[", 
   RowBox[{"NotebookDirectory", "[", "]"}], "]"}], ";"}]], "Input",
 CellChangeTimes->{{3.751183327397894*^9, 3.751183334653039*^9}, 
   3.7567978451653833`*^9},
 CellLabel->
  "In[521]:=",ExpressionUUID->"a9204ae2-9919-472d-b5c0-3aae98f96c89"],

Cell[BoxData[
 RowBox[{"Get", "[", "\"\<OpProjection.m\>\"", "]"}]], "Input",
 CellChangeTimes->{{3.751183336861361*^9, 3.751183349847241*^9}, {
   3.7512674056379538`*^9, 3.751267419548038*^9}, {3.751267467341695*^9, 
   3.751267473143629*^9}, 3.7512682450231133`*^9, 3.751268290741321*^9, {
   3.751268354807549*^9, 3.751268355016263*^9}, {3.75126851249084*^9, 
   3.751268515562708*^9}, {3.760854652300077*^9, 3.760854653560177*^9}, {
   3.760854693481792*^9, 3.760854726406427*^9}, {3.761217174121593*^9, 
   3.761217199223022*^9}, {3.7612176027462873`*^9, 3.761217603388012*^9}, {
   3.761217695871572*^9, 3.761217704536562*^9}, {3.762017879872128*^9, 
   3.762017881677663*^9}, {3.7621520886746607`*^9, 3.7621520963363543`*^9}, 
   3.7669477063042803`*^9},
 CellLabel->
  "In[522]:=",ExpressionUUID->"7f0556eb-11e6-4d93-8e86-35273c8d3b29"],

Cell[BoxData[{
 RowBox[{
  RowBox[{
   RowBox[{"res", "[", "1", "]"}], "=", 
   RowBox[{"P", "[", 
    RowBox[{"ax", ",", "ay", ",", 
     RowBox[{"-", "ax"}], ",", 
     RowBox[{"-", "ay"}]}], "]"}]}], ";"}], "\n", 
 RowBox[{
  RowBox[{
   RowBox[{"res", "[", "2", "]"}], "=", 
   RowBox[{"P", "[", 
    RowBox[{"ax", ",", "ax", ",", "ay", ",", 
     RowBox[{"-", "ax"}], ",", 
     RowBox[{"-", "ax"}], ",", 
     RowBox[{"-", "ay"}]}], "]"}]}], ";"}], "\n", 
 RowBox[{
  RowBox[{
   RowBox[{"res", "[", "3", "]"}], "=", 
   RowBox[{"P", "[", 
    RowBox[{"ax", ",", 
     RowBox[{"-", "ay"}], ",", "az", ",", 
     RowBox[{"-", "ax"}], ",", "ay", ",", 
     RowBox[{"-", "az"}]}], "]"}]}], ";"}], "\n", 
 RowBox[{
  RowBox[{
   RowBox[{"res", "[", "4", "]"}], "=", 
   RowBox[{"P", "[", 
    RowBox[{"ax", ",", "ay", ",", 
     RowBox[{"-", "ax"}], ",", "az", ",", 
     RowBox[{"-", "ay"}], ",", 
     RowBox[{"-", "az"}]}], "]"}]}], ";"}], "\n", 
 RowBox[{
  RowBox[{
   RowBox[{"res", "[", "5", "]"}], "=", 
   RowBox[{"P", "[", 
    RowBox[{"ax", ",", "ax", ",", 
     RowBox[{"-", "ay"}], ",", 
     RowBox[{"-", "ax"}], ",", 
     RowBox[{"-", "ax"}], ",", "az", ",", "ay", ",", 
     RowBox[{"-", "az"}]}], "]"}]}], ";"}], "\n", 
 RowBox[{
  RowBox[{
   RowBox[{"res", "[", "6", "]"}], "=", 
   RowBox[{"P", "[", 
    RowBox[{"ax", ",", "ax", ",", 
     RowBox[{"-", "ay"}], ",", 
     RowBox[{"-", "ax"}], ",", "ay", ",", "az", ",", 
     RowBox[{"-", "ax"}], ",", 
     RowBox[{"-", "az"}]}], "]"}]}], ";"}], "\n", 
 RowBox[{
  RowBox[{
   RowBox[{"res", "[", "7", "]"}], "=", 
   RowBox[{"P", "[", 
    RowBox[{"ax", ",", "ax", ",", 
     RowBox[{"-", "ay"}], ",", 
     RowBox[{"-", "ax"}], ",", "az", ",", "ay", ",", 
     RowBox[{"-", "ax"}], ",", 
     RowBox[{"-", "az"}]}], "]"}]}], ";"}], "\n", 
 RowBox[{
  RowBox[{
   RowBox[{"res", "[", "8", "]"}], "=", 
   RowBox[{"P", "[", 
    RowBox[{"ax", ",", "ax", ",", 
     RowBox[{"-", "ay"}], ",", 
     RowBox[{"-", "ax"}], ",", "az", ",", 
     RowBox[{"-", "ax"}], ",", "ay", ",", 
     RowBox[{"-", "az"}]}], "]"}]}], ";"}], "\n", 
 RowBox[{
  RowBox[{
   RowBox[{"res", "[", "9", "]"}], "=", 
   RowBox[{"P", "[", 
    RowBox[{"ax", ",", "ax", ",", "ay", ",", 
     RowBox[{"-", "ax"}], ",", 
     RowBox[{"-", "az"}], ",", 
     RowBox[{"-", "ax"}], ",", "az", ",", 
     RowBox[{"-", "ay"}]}], "]"}]}], ";"}], "\n", 
 RowBox[{
  RowBox[{
   RowBox[{"res", "[", "10", "]"}], "=", 
   RowBox[{"P", "[", 
    RowBox[{"ax", ",", "ax", ",", "ay", ",", 
     RowBox[{"-", "az"}], ",", 
     RowBox[{"-", "ax"}], ",", 
     RowBox[{"-", "ax"}], ",", "az", ",", 
     RowBox[{"-", "ay"}]}], "]"}]}], ";"}], "\n", 
 RowBox[{
  RowBox[{
   RowBox[{"res", "[", "11", "]"}], "=", 
   RowBox[{"P", "[", 
    RowBox[{"ax", ",", "ay", ",", 
     RowBox[{"-", "ax"}], ",", 
     RowBox[{"-", "ay"}], ",", 
     RowBox[{"-", "ax"}], ",", "az", ",", "ax", ",", 
     RowBox[{"-", "az"}]}], "]"}]}], ";"}], "\n", 
 RowBox[{
  RowBox[{
   RowBox[{"res", "[", "12", "]"}], "=", 
   RowBox[{"P", "[", 
    RowBox[{"ax", ",", "ax", ",", "ax", ",", 
     RowBox[{"-", "ay"}], ",", 
     RowBox[{"-", "ax"}], ",", 
     RowBox[{"-", "ax"}], ",", 
     RowBox[{"-", "ax"}], ",", "az", ",", "ay", ",", 
     RowBox[{"-", "az"}]}], "]"}]}], ";"}], "\n", 
 RowBox[{
  RowBox[{
   RowBox[{"res", "[", "13", "]"}], "=", 
   RowBox[{"P", "[", 
    RowBox[{"ax", ",", "ax", ",", "ax", ",", 
     RowBox[{"-", "ay"}], ",", 
     RowBox[{"-", "ax"}], ",", 
     RowBox[{"-", "ax"}], ",", "ay", ",", "ay", ",", 
     RowBox[{"-", "ax"}], ",", 
     RowBox[{"-", "ay"}]}], "]"}]}], ";"}], "\n", 
 RowBox[{
  RowBox[{
   RowBox[{"res", "[", "14", "]"}], "=", 
   RowBox[{"P", "[", 
    RowBox[{"ax", ",", "ax", ",", "ax", ",", 
     RowBox[{"-", "ay"}], ",", 
     RowBox[{"-", "ax"}], ",", 
     RowBox[{"-", "ax"}], ",", "ay", ",", "az", ",", 
     RowBox[{"-", "ax"}], ",", 
     RowBox[{"-", "az"}]}], "]"}]}], ";"}], "\n", 
 RowBox[{
  RowBox[{
   RowBox[{"res", "[", "15", "]"}], "=", 
   RowBox[{"P", "[", 
    RowBox[{"ax", ",", "ax", ",", "ax", ",", 
     RowBox[{"-", "ay"}], ",", 
     RowBox[{"-", "ax"}], ",", 
     RowBox[{"-", "ax"}], ",", "az", ",", 
     RowBox[{"-", "ax"}], ",", "ay", ",", 
     RowBox[{"-", "az"}]}], "]"}]}], ";"}], "\n", 
 RowBox[{
  RowBox[{
   RowBox[{"res", "[", "16", "]"}], "=", 
   RowBox[{"P", "[", 
    RowBox[{"ax", ",", "ax", ",", "ax", ",", 
     RowBox[{"-", "ay"}], ",", 
     RowBox[{"-", "ax"}], ",", 
     RowBox[{"-", "ax"}], ",", "az", ",", "ay", ",", 
     RowBox[{"-", "ax"}], ",", 
     RowBox[{"-", "az"}]}], "]"}]}], ";"}], "\n", 
 RowBox[{
  RowBox[{
   RowBox[{"res", "[", "17", "]"}], "=", 
   RowBox[{"P", "[", 
    RowBox[{"ax", ",", "ax", ",", "ax", ",", 
     RowBox[{"-", "ay"}], ",", 
     RowBox[{"-", "ax"}], ",", "ay", ",", 
     RowBox[{"-", "ax"}], ",", "az", ",", 
     RowBox[{"-", "ax"}], ",", 
     RowBox[{"-", "az"}]}], "]"}]}], ";"}], "\n", 
 RowBox[{
  RowBox[{
   RowBox[{"res", "[", "18", "]"}], "=", 
   RowBox[{"P", "[", 
    RowBox[{"ax", ",", "ax", ",", "ax", ",", 
     RowBox[{"-", "ay"}], ",", 
     RowBox[{"-", "ax"}], ",", "az", ",", 
     RowBox[{"-", "ax"}], ",", 
     RowBox[{"-", "ax"}], ",", "ay", ",", 
     RowBox[{"-", "az"}]}], "]"}]}], ";"}], "\n", 
 RowBox[{
  RowBox[{
   RowBox[{"res", "[", "19", "]"}], "=", 
   RowBox[{"P", "[", 
    RowBox[{"ax", ",", "ax", ",", "ax", ",", 
     RowBox[{"-", "ay"}], ",", 
     RowBox[{"-", "ax"}], ",", "az", ",", 
     RowBox[{"-", "ax"}], ",", "ay", ",", 
     RowBox[{"-", "ax"}], ",", 
     RowBox[{"-", "az"}]}], "]"}]}], ";"}], "\n", 
 RowBox[{
  RowBox[{
   RowBox[{"res", "[", "20", "]"}], "=", 
   RowBox[{"P", "[", 
    RowBox[{"ax", ",", "ax", ",", "ax", ",", "ay", ",", 
     RowBox[{"-", "ax"}], ",", 
     RowBox[{"-", "ax"}], ",", "ay", ",", 
     RowBox[{"-", "ax"}], ",", 
     RowBox[{"-", "ay"}], ",", 
     RowBox[{"-", "ay"}]}], "]"}]}], ";"}], "\n", 
 RowBox[{
  RowBox[{
   RowBox[{"res", "[", "21", "]"}], "=", 
   RowBox[{"P", "[", 
    RowBox[{"ax", ",", "ax", ",", "ax", ",", "ay", ",", 
     RowBox[{"-", "ax"}], ",", 
     RowBox[{"-", "ax"}], ",", 
     RowBox[{"-", "az"}], ",", 
     RowBox[{"-", "ax"}], ",", "az", ",", 
     RowBox[{"-", "ay"}]}], "]"}]}], ";"}], "\n", 
 RowBox[{
  RowBox[{
   RowBox[{"res", "[", "22", "]"}], "=", 
   RowBox[{"P", "[", 
    RowBox[{"ax", ",", "ax", ",", "ax", ",", "ay", ",", 
     RowBox[{"-", "ax"}], ",", "ay", ",", 
     RowBox[{"-", "ax"}], ",", 
     RowBox[{"-", "ax"}], ",", 
     RowBox[{"-", "ay"}], ",", 
     RowBox[{"-", "ay"}]}], "]"}]}], ";"}], "\n", 
 RowBox[{
  RowBox[{
   RowBox[{"res", "[", "23", "]"}], "=", 
   RowBox[{"P", "[", 
    RowBox[{"ax", ",", "ax", ",", "ax", ",", "ay", ",", 
     RowBox[{"-", "ax"}], ",", 
     RowBox[{"-", "az"}], ",", 
     RowBox[{"-", "ax"}], ",", 
     RowBox[{"-", "ax"}], ",", "az", ",", 
     RowBox[{"-", "ay"}]}], "]"}]}], ";"}], "\n", 
 RowBox[{
  RowBox[{
   RowBox[{"res", "[", "24", "]"}], "=", 
   RowBox[{"P", "[", 
    RowBox[{"ax", ",", "ax", ",", 
     RowBox[{"-", "ay"}], ",", 
     RowBox[{"-", "ax"}], ",", 
     RowBox[{"-", "ax"}], ",", "ay", ",", 
     RowBox[{"-", "ax"}], ",", "ay", ",", "ax", ",", 
     RowBox[{"-", "ay"}]}], "]"}]}], ";"}], "\n", 
 RowBox[{
  RowBox[{
   RowBox[{"res", "[", "25", "]"}], "=", 
   RowBox[{"P", "[", 
    RowBox[{"ax", ",", "ax", ",", 
     RowBox[{"-", "ay"}], ",", 
     RowBox[{"-", "ax"}], ",", 
     RowBox[{"-", "ax"}], ",", "ay", ",", 
     RowBox[{"-", "ax"}], ",", "az", ",", "ax", ",", 
     RowBox[{"-", "az"}]}], "]"}]}], ";"}], "\n", 
 RowBox[{
  RowBox[{
   RowBox[{"res", "[", "26", "]"}], "=", 
   RowBox[{"P", "[", 
    RowBox[{"ax", ",", "ax", ",", 
     RowBox[{"-", "ay"}], ",", 
     RowBox[{"-", "ax"}], ",", 
     RowBox[{"-", "ax"}], ",", "ay", ",", 
     RowBox[{"-", "az"}], ",", "ay", ",", "az", ",", 
     RowBox[{"-", "ay"}]}], "]"}]}], ";"}], "\n", 
 RowBox[{
  RowBox[{
   RowBox[{"res", "[", "27", "]"}], "=", 
   RowBox[{"P", "[", 
    RowBox[{"ax", ",", "ax", ",", 
     RowBox[{"-", "ay"}], ",", 
     RowBox[{"-", "ax"}], ",", 
     RowBox[{"-", "ay"}], ",", "az", ",", 
     RowBox[{"-", "ax"}], ",", "ay", ",", "ay", ",", 
     RowBox[{"-", "az"}]}], "]"}]}], ";"}], "\n", 
 RowBox[{
  RowBox[{
   RowBox[{"res", "[", "28", "]"}], "=", 
   RowBox[{"P", "[", 
    RowBox[{"ax", ",", "ax", ",", 
     RowBox[{"-", "ay"}], ",", 
     RowBox[{"-", "ax"}], ",", 
     RowBox[{"-", "ay"}], ",", "az", ",", "ay", ",", 
     RowBox[{"-", "ax"}], ",", "ay", ",", 
     RowBox[{"-", "az"}]}], "]"}]}], ";"}], "\n", 
 RowBox[{
  RowBox[{
   RowBox[{"res", "[", "29", "]"}], "=", 
   RowBox[{"P", "[", 
    RowBox[{"ax", ",", "ax", ",", 
     RowBox[{"-", "ay"}], ",", 
     RowBox[{"-", "ax"}], ",", "ay", ",", 
     RowBox[{"-", "ax"}], ",", 
     RowBox[{"-", "ax"}], ",", "ay", ",", "ax", ",", 
     RowBox[{"-", "ay"}]}], "]"}]}], ";"}], "\n", 
 RowBox[{
  RowBox[{
   RowBox[{"res", "[", "30", "]"}], "=", 
   RowBox[{"P", "[", 
    RowBox[{"ax", ",", "ax", ",", 
     RowBox[{"-", "ay"}], ",", 
     RowBox[{"-", "ax"}], ",", "ay", ",", 
     RowBox[{"-", "ax"}], ",", 
     RowBox[{"-", "ax"}], ",", "az", ",", "ax", ",", 
     RowBox[{"-", "az"}]}], "]"}]}], ";"}], "\n", 
 RowBox[{
  RowBox[{
   RowBox[{"res", "[", "31", "]"}], "=", 
   RowBox[{"P", "[", 
    RowBox[{"ax", ",", "ax", ",", 
     RowBox[{"-", "ay"}], ",", 
     RowBox[{"-", "ax"}], ",", "ay", ",", 
     RowBox[{"-", "ax"}], ",", 
     RowBox[{"-", "ay"}], ",", "az", ",", "ay", ",", 
     RowBox[{"-", "az"}]}], "]"}]}], ";"}], "\n", 
 RowBox[{
  RowBox[{
   RowBox[{"res", "[", "32", "]"}], "=", 
   RowBox[{"P", "[", 
    RowBox[{"ax", ",", "ax", ",", 
     RowBox[{"-", "ay"}], ",", 
     RowBox[{"-", "ax"}], ",", "ay", ",", 
     RowBox[{"-", "ax"}], ",", "ay", ",", "az", ",", 
     RowBox[{"-", "ay"}], ",", 
     RowBox[{"-", "az"}]}], "]"}]}], ";"}]}], "Input",
 CellChangeTimes->{{3.766916126201436*^9, 3.766916195509633*^9}},
 CellLabel->
  "In[523]:=",ExpressionUUID->"1986ba6f-0937-40e5-84b7-75568c370d56"],

Cell[BoxData[{
 RowBox[{"CodeControl", "=", 
  RowBox[{
   RowBox[{"{", 
    RowBox[{"\"\<github\>\"", ",", "\"\<run\>\""}], "}"}], "[", 
   RowBox[{"[", "1", "]"}], "]"}]}], "\[IndentingNewLine]", 
 RowBox[{"TypeControl", "=", 
  RowBox[{
   RowBox[{"{", 
    RowBox[{
    "\"\<all\>\"", ",", "\"\<glueballs1tr\>\"", ",", "\"\<glueballs2tr\>\"", 
     ",", "\"\<torellons\>\""}], "}"}], "[", 
   RowBox[{"[", "1", "]"}], "]"}]}]}], "Input",
 CellChangeTimes->{{3.863164590547941*^9, 3.863164657098837*^9}, 
   3.863164758347383*^9, {3.8631649037988577`*^9, 3.8631649297672567`*^9}, {
   3.863165033621559*^9, 3.863165033725624*^9}, {3.86435970014613*^9, 
   3.864359700210594*^9}, 3.86436975247679*^9, {3.8644428614230137`*^9, 
   3.864442861586134*^9}, {3.864443203242816*^9, 3.864443203332034*^9}, {
   3.864445280487939*^9, 3.864445280578066*^9}, {3.864445492454782*^9, 
   3.86444549252912*^9}, {3.864527435968986*^9, 3.8645274360429564`*^9}, {
   3.8645275469254103`*^9, 3.864527575454648*^9}, {3.864527667767172*^9, 
   3.864527671441258*^9}, {3.8646976236821957`*^9, 3.864697684809526*^9}, {
   3.8646991973517303`*^9, 3.864699198082807*^9}, {3.864701373733478*^9, 
   3.864701373805756*^9}, {3.864719717768317*^9, 3.8647197196841516`*^9}, {
   3.864721412776011*^9, 3.864721421714911*^9}, {3.864725477548234*^9, 
   3.86472547765241*^9}, {3.865416979800098*^9, 3.865416979851646*^9}, {
   3.8654181924000053`*^9, 3.8654181924723682`*^9}, {3.8654230442480087`*^9, 
   3.8654230515305157`*^9}, {3.865423191947242*^9, 3.8654231941661367`*^9}, {
   3.865481299564721*^9, 3.865481299662366*^9}, {3.865481375986239*^9, 
   3.8654813760284843`*^9}, {3.866093531547633*^9, 3.866093531648551*^9}, {
   3.866112581001959*^9, 3.866112581036693*^9}, {3.866439649315765*^9, 
   3.866439649399135*^9}, {3.866439771458282*^9, 3.8664397715478086`*^9}, {
   3.866601536305416*^9, 3.866601540728714*^9}},
 CellLabel->
  "In[555]:=",ExpressionUUID->"235cc05a-d3c5-4d2a-b0a4-ef29b6913572"],

Cell[BoxData[
 RowBox[{
  RowBox[{"(*", 
   RowBox[{"minimal", " ", "set", " ", "for", " ", "github", " ", "CI"}], 
   "*)"}], "\[IndentingNewLine]", 
  RowBox[{
   RowBox[{"If", "[", 
    RowBox[{
     RowBox[{
      RowBox[{"TypeControl", "==", "\"\<glueballs1tr\>\""}], "||", " ", 
      RowBox[{"TypeControl", "==", "\"\<all\>\""}]}], ",", 
     "\[IndentingNewLine]", 
     RowBox[{
      RowBox[{"If", "[", 
       RowBox[{
        RowBox[{"CodeControl", "==", "\"\<github\>\""}], ",", 
        "\[IndentingNewLine]", 
        RowBox[{
         RowBox[{"Add1trOpCorrelators", "[", 
          RowBox[{
           RowBox[{"-", "1"}], ",", "0", ",", "0", ",", "1", ",", "1", ",", 
           "1", ",", 
           RowBox[{"res", "[", "1", "]"}]}], "]"}], ";", 
         "\[IndentingNewLine]", 
         RowBox[{"Add1trOpCorrelators", "[", 
          RowBox[{
          "0", ",", "0", ",", "0", ",", "2", ",", "1", ",", "1", ",", 
           RowBox[{"res", "[", "2", "]"}]}], "]"}], ";", 
         "\[IndentingNewLine]", 
         RowBox[{"Add1trOpCorrelators", "[", 
          RowBox[{
          "0", ",", "1", ",", "0", ",", "2", ",", "1", ",", "1", ",", 
           RowBox[{"res", "[", "8", "]"}]}], "]"}], ";", 
         "\[IndentingNewLine]", 
         RowBox[{"Add1trOpCorrelators", "[", 
          RowBox[{"0", ",", "0", ",", "0", ",", "4", ",", "1", ",", 
           RowBox[{"-", "1"}], ",", 
           RowBox[{"res", "[", "2", "]"}]}], "]"}], ";", 
         "\[IndentingNewLine]", 
         RowBox[{"Add1trOpCorrelators", "[", 
          RowBox[{"0", ",", "0", ",", "0", ",", "4", ",", "2", ",", 
           RowBox[{"-", "1"}], ",", 
           RowBox[{"res", "[", "2", "]"}]}], "]"}], ";", 
         "\[IndentingNewLine]", 
         RowBox[{"Add1trOpCorrelators", "[", 
          RowBox[{"0", ",", "0", ",", "0", ",", "4", ",", "3", ",", 
           RowBox[{"-", "1"}], ",", 
           RowBox[{"res", "[", "2", "]"}]}], "]"}], ";"}]}], 
       "\[IndentingNewLine]", "]"}], ";", "\[IndentingNewLine]", 
      RowBox[{"(*", 
       RowBox[{
       "Base", " ", "op", " ", "used", " ", "for", " ", "the", " ", "runs"}], 
       "*)"}], "\[IndentingNewLine]", 
      RowBox[{"If", "[", 
       RowBox[{
        RowBox[{"CodeControl", "==", "\"\<run\>\""}], ",", 
        "\[IndentingNewLine]", 
        RowBox[{
         RowBox[{"Add1trOpCorrelators", "[", 
          RowBox[{
          "0", ",", "0", ",", "0", ",", "1", ",", "1", ",", "1", ",", 
           RowBox[{"res", "[", "1", "]"}]}], "]"}], ";", 
         "\[IndentingNewLine]", 
         RowBox[{"Add1trOpCorrelators", "[", 
          RowBox[{
          "0", ",", "0", ",", "0", ",", "1", ",", "1", ",", "1", ",", 
           RowBox[{"res", "[", "3", "]"}]}], "]"}], ";", 
         "\[IndentingNewLine]", 
         RowBox[{"Add1trOpCorrelators", "[", 
          RowBox[{
          "0", ",", "0", ",", "0", ",", "1", ",", "1", ",", "1", ",", 
           RowBox[{"res", "[", "5", "]"}]}], "]"}], ";", 
         "\[IndentingNewLine]", 
         RowBox[{"Add1trOpCorrelators", "[", 
          RowBox[{
          "0", ",", "0", ",", "0", ",", "1", ",", "1", ",", "1", ",", 
           RowBox[{"res", "[", "8", "]"}]}], "]"}], ";", 
         "\[IndentingNewLine]", 
         RowBox[{"Add1trOpCorrelators", "[", 
          RowBox[{
          "0", ",", "0", ",", "0", ",", "1", ",", "1", ",", "1", ",", 
           RowBox[{"res", "[", "11", "]"}]}], "]"}], ";", 
         "\[IndentingNewLine]", 
         RowBox[{"Add1trOpCorrelators", "[", 
          RowBox[{
          "0", ",", "0", ",", "0", ",", "1", ",", "1", ",", "1", ",", 
           RowBox[{"res", "[", "12", "]"}]}], "]"}], ";", 
         "\[IndentingNewLine]", 
         RowBox[{"Add1trOpCorrelators", "[", 
          RowBox[{
          "0", ",", "0", ",", "0", ",", "1", ",", "1", ",", "1", ",", 
           RowBox[{"res", "[", "16", "]"}]}], "]"}], ";", 
         "\[IndentingNewLine]", 
         RowBox[{"Add1trOpCorrelators", "[", 
          RowBox[{
          "0", ",", "0", ",", "0", ",", "1", ",", "1", ",", "1", ",", 
           RowBox[{"res", "[", "20", "]"}]}], "]"}], ";"}]}], 
       "\[IndentingNewLine]", "]"}]}]}], "\[IndentingNewLine]", "]"}], 
   ";"}]}]], "Input",
 CellChangeTimes->{
  3.817643203880024*^9, {3.818759601991507*^9, 3.818759602798936*^9}, {
   3.818784365148649*^9, 3.818784390483528*^9}, {3.8187845866516047`*^9, 
   3.818784590032792*^9}, {3.818784784967703*^9, 3.818784850413068*^9}, {
   3.8187849847163887`*^9, 3.8187849889436293`*^9}, {3.818923915438655*^9, 
   3.81892392987287*^9}, {3.818924141946168*^9, 3.818924143409129*^9}, {
   3.8189281532962503`*^9, 3.8189281537429333`*^9}, {3.862453890012546*^9, 
   3.8624539307980137`*^9}, {3.8624539628689404`*^9, 3.8624540149802*^9}, {
   3.8624723068703833`*^9, 3.862472309719398*^9}, {3.862472499595192*^9, 
   3.8624725004783773`*^9}, {3.8624731708424263`*^9, 3.862473172026791*^9}, {
   3.862473286944693*^9, 3.862473290168161*^9}, 3.862473373646063*^9, {
   3.862473469228862*^9, 3.862473471882331*^9}, {3.862474728633326*^9, 
   3.862474729546578*^9}, {3.862474793979313*^9, 3.862474795592587*^9}, {
   3.862476357000579*^9, 3.862476359353673*^9}, {3.862620711301837*^9, 
   3.862620715543364*^9}, {3.862805953710547*^9, 3.8628059560634212`*^9}, {
   3.863164569837022*^9, 3.8631645731421328`*^9}, {3.8631646853929157`*^9, 
   3.863164714084021*^9}, {3.863164752394745*^9, 3.863164810446587*^9}, {
   3.86316493022119*^9, 3.863164930735608*^9}, {3.8645275372136097`*^9, 
   3.864527543579817*^9}, {3.864527638070693*^9, 3.864527666103716*^9}, {
   3.8646975817356243`*^9, 3.8646975818651543`*^9}, {3.864697670560463*^9, 
   3.864697750945674*^9}, 3.864699217751616*^9, {3.864729344317161*^9, 
   3.864729383118724*^9}, {3.865050231204516*^9, 3.865050270122147*^9}, {
   3.8650589045047398`*^9, 3.8650589303320713`*^9}},
 CellLabel->
  "In[557]:=",ExpressionUUID->"83d43c5d-194c-4391-8c8b-737e48cbad4e"],

Cell[BoxData[
 RowBox[{
  RowBox[{"(*", 
   RowBox[{"minimal", " ", "set", " ", "for", " ", "github", " ", "CI"}], 
   "*)"}], "\[IndentingNewLine]", 
  RowBox[{
   RowBox[{"If", "[", 
    RowBox[{
     RowBox[{
      RowBox[{"TypeControl", "==", "\"\<glueballs2tr\>\""}], "||", " ", 
      RowBox[{"TypeControl", "==", "\"\<all\>\""}]}], ",", 
     "\[IndentingNewLine]", 
     RowBox[{
      RowBox[{"If", "[", 
       RowBox[{
        RowBox[{"CodeControl", "==", "\"\<github\>\""}], ",", 
        "\[IndentingNewLine]", 
        RowBox[{
         RowBox[{"Add2trOpCorrelators", "[", 
          RowBox[{
           RowBox[{"res", "[", "1", "]"}], ",", "0", ",", "0", ",", "1", ",", 
           "1", ",", "1", ",", 
           RowBox[{"res", "[", "1", "]"}], ",", "0", ",", "0", ",", "1", ",", 
           "1", ",", "1", ",", "0", ",", "0", ",", "0", ",", "1", ",", "1"}], 
          "]"}], ";", "\[IndentingNewLine]", 
         RowBox[{"Add2trOpCorrelators", "[", 
          RowBox[{
           RowBox[{"res", "[", "1", "]"}], ",", "0", ",", "0", ",", "1", ",", 
           "1", ",", "1", ",", 
           RowBox[{"res", "[", "1", "]"}], ",", "0", ",", "0", ",", "1", ",", 
           "1", ",", "1", ",", "0", ",", "0", ",", "0", ",", "3", ",", "1"}], 
          "]"}], ";", "\[IndentingNewLine]", 
         RowBox[{"Add2trOpCorrelators", "[", 
          RowBox[{
           RowBox[{"res", "[", "1", "]"}], ",", "0", ",", "0", ",", "1", ",", 
           "1", ",", "1", ",", 
           RowBox[{"res", "[", "1", "]"}], ",", "0", ",", "0", ",", "1", ",", 
           "1", ",", "1", ",", "0", ",", "0", ",", "0", ",", "3", ",", "2"}], 
          "]"}]}]}], "\[IndentingNewLine]", "]"}], ";", "\n", 
      RowBox[{"(*", 
       RowBox[{
       "Base", " ", "op", " ", "used", " ", "for", " ", "the", " ", "runs"}], 
       "*)"}], "\[IndentingNewLine]", 
      RowBox[{"If", "[", 
       RowBox[{
        RowBox[{"CodeControl", "==", "\"\<run\>\""}], ",", 
        "\[IndentingNewLine]", 
        RowBox[{
         RowBox[{"Add2trOpCorrelators", "[", 
          RowBox[{
           RowBox[{"res", "[", "1", "]"}], ",", "0", ",", "0", ",", "1", ",", 
           "1", ",", "1", ",", 
           RowBox[{"res", "[", "1", "]"}], ",", "0", ",", "0", ",", "1", ",", 
           "1", ",", "1", ",", "0", ",", "0", ",", "0", ",", "1", ",", "1"}], 
          "]"}], ";", "\[IndentingNewLine]", 
         RowBox[{"Add2trOpCorrelators", "[", 
          RowBox[{
           RowBox[{"res", "[", "2", "]"}], ",", "0", ",", "0", ",", "1", ",", 
           "1", ",", "1", ",", 
           RowBox[{"res", "[", "2", "]"}], ",", "0", ",", "0", ",", "1", ",", 
           "1", ",", "1", ",", "0", ",", "0", ",", "0", ",", "1", ",", "1"}], 
          "]"}], ";", "\[IndentingNewLine]", 
         RowBox[{"Add2trOpCorrelators", "[", 
          RowBox[{
           RowBox[{"res", "[", "3", "]"}], ",", "0", ",", "0", ",", "1", ",", 
           "1", ",", "1", ",", 
           RowBox[{"res", "[", "3", "]"}], ",", "0", ",", "0", ",", "1", ",", 
           "1", ",", "1", ",", "0", ",", "0", ",", "0", ",", "1", ",", "1"}], 
          "]"}], ";", "\[IndentingNewLine]", 
         RowBox[{"Add2trOpCorrelators", "[", 
          RowBox[{
           RowBox[{"res", "[", "4", "]"}], ",", "0", ",", "0", ",", "1", ",", 
           "1", ",", "1", ",", 
           RowBox[{"res", "[", "4", "]"}], ",", "0", ",", "0", ",", "1", ",", 
           "1", ",", "1", ",", "0", ",", "0", ",", "0", ",", "1", ",", "1"}], 
          "]"}], ";", "\[IndentingNewLine]", 
         RowBox[{"Add2trOpCorrelators", "[", 
          RowBox[{
           RowBox[{"res", "[", "5", "]"}], ",", "0", ",", "0", ",", "1", ",", 
           "1", ",", "1", ",", 
           RowBox[{"res", "[", "5", "]"}], ",", "0", ",", "0", ",", "1", ",", 
           "1", ",", "1", ",", "0", ",", "0", ",", "0", ",", "1", ",", "1"}], 
          "]"}], ";", "\[IndentingNewLine]", 
         RowBox[{"Add2trOpCorrelators", "[", 
          RowBox[{
           RowBox[{"res", "[", "16", "]"}], ",", "0", ",", "0", ",", "1", ",",
            "1", ",", "1", ",", 
           RowBox[{"res", "[", "16", "]"}], ",", "0", ",", "0", ",", "1", ",",
            "1", ",", "1", ",", "0", ",", "0", ",", "0", ",", "1", ",", "1"}],
           "]"}], ";", "\[IndentingNewLine]", 
         RowBox[{"Add2trOpCorrelators", "[", 
          RowBox[{
           RowBox[{"res", "[", "20", "]"}], ",", "0", ",", "0", ",", "1", ",",
            "1", ",", "1", ",", 
           RowBox[{"res", "[", "20", "]"}], ",", "0", ",", "0", ",", "1", ",",
            "1", ",", "1", ",", "0", ",", "0", ",", "0", ",", "1", ",", "1"}],
           "]"}], ";", "\[IndentingNewLine]", 
         RowBox[{"Add2trOpCorrelators", "[", 
          RowBox[{
           RowBox[{"res", "[", "1", "]"}], ",", "0", ",", "1", ",", "1", ",", 
           "1", ",", "1", ",", 
           RowBox[{"res", "[", "1", "]"}], ",", "0", ",", "1", ",", "1", ",", 
           "1", ",", "1", ",", "0", ",", "0", ",", "0", ",", "1", ",", "1"}], 
          "]"}], ";", "\[IndentingNewLine]", 
         RowBox[{"Add2trOpCorrelators", "[", 
          RowBox[{
           RowBox[{"res", "[", "2", "]"}], ",", "0", ",", "1", ",", "1", ",", 
           "1", ",", "1", ",", 
           RowBox[{"res", "[", "2", "]"}], ",", "0", ",", "1", ",", "1", ",", 
           "1", ",", "1", ",", "0", ",", "0", ",", "0", ",", "1", ",", "1"}], 
          "]"}], ";", "\[IndentingNewLine]", 
         RowBox[{"Add2trOpCorrelators", "[", 
          RowBox[{
           RowBox[{"res", "[", "3", "]"}], ",", "0", ",", "1", ",", "1", ",", 
           "1", ",", "1", ",", 
           RowBox[{"res", "[", "3", "]"}], ",", "0", ",", "1", ",", "1", ",", 
           "1", ",", "1", ",", "0", ",", "0", ",", "0", ",", "1", ",", "1"}], 
          "]"}], ";", "\[IndentingNewLine]", 
         RowBox[{"Add2trOpCorrelators", "[", 
          RowBox[{
           RowBox[{"res", "[", "4", "]"}], ",", "0", ",", "1", ",", "1", ",", 
           "1", ",", "1", ",", 
           RowBox[{"res", "[", "4", "]"}], ",", "0", ",", "1", ",", "1", ",", 
           "1", ",", "1", ",", "0", ",", "0", ",", "0", ",", "1", ",", "1"}], 
          "]"}], ";", "\[IndentingNewLine]", 
         RowBox[{"Add2trOpCorrelators", "[", 
          RowBox[{
           RowBox[{"res", "[", "5", "]"}], ",", "0", ",", "1", ",", "1", ",", 
           "1", ",", "1", ",", 
           RowBox[{"res", "[", "5", "]"}], ",", "0", ",", "1", ",", "1", ",", 
           "1", ",", "1", ",", "0", ",", "0", ",", "0", ",", "1", ",", "1"}], 
          "]"}], ";", "\[IndentingNewLine]", 
         RowBox[{"Add2trOpCorrelators", "[", 
          RowBox[{
           RowBox[{"res", "[", "16", "]"}], ",", "0", ",", "1", ",", "1", ",",
            "1", ",", "1", ",", 
           RowBox[{"res", "[", "16", "]"}], ",", "0", ",", "1", ",", "1", ",",
            "1", ",", "1", ",", "0", ",", "0", ",", "0", ",", "1", ",", "1"}],
           "]"}], ";", "\[IndentingNewLine]", 
         RowBox[{"Add2trOpCorrelators", "[", 
          RowBox[{
           RowBox[{"res", "[", "20", "]"}], ",", "0", ",", "1", ",", "1", ",",
            "1", ",", "1", ",", 
           RowBox[{"res", "[", "20", "]"}], ",", "0", ",", "1", ",", "1", ",",
            "1", ",", "1", ",", "0", ",", "0", ",", "0", ",", "1", ",", "1"}],
           "]"}]}]}], "\[IndentingNewLine]", "]"}], ";"}]}], 
    "\[IndentingNewLine]", "]"}], ";"}]}]], "Input",
 CellChangeTimes->{{3.86245402296029*^9, 3.862454029440889*^9}, {
   3.8624725098286753`*^9, 3.862472510692651*^9}, {3.8624763651818438`*^9, 
   3.862476366943685*^9}, {3.8624766984779053`*^9, 3.862476702196711*^9}, {
   3.86247675553681*^9, 3.862476762059243*^9}, {3.86247680593436*^9, 
   3.862476844145768*^9}, {3.862620722599559*^9, 3.8626207253921413`*^9}, {
   3.862805967449102*^9, 3.862805969323826*^9}, {3.863164580628516*^9, 
   3.8631645835073433`*^9}, {3.863164822041758*^9, 3.863164846928252*^9}, {
   3.863164931256061*^9, 3.863164931663364*^9}, {3.864527512083723*^9, 
   3.864527524698504*^9}, 3.864527662232524*^9, {3.864697765203149*^9, 
   3.864697781216297*^9}, {3.864729349495968*^9, 3.864729354349914*^9}},
 CellLabel->
  "In[558]:=",ExpressionUUID->"a8b5aac3-4474-4b14-a145-642f7c250882"],

Cell[BoxData[
 RowBox[{
  RowBox[{"(*", 
   RowBox[{"minimal", " ", "set", " ", "for", " ", "github", " ", "CI"}], 
   "*)"}], "\[IndentingNewLine]", 
  RowBox[{
   RowBox[{"If", "[", 
    RowBox[{
     RowBox[{
      RowBox[{"TypeControl", "==", "\"\<torellons\>\""}], "||", " ", 
      RowBox[{"TypeControl", "==", "\"\<all\>\""}]}], ",", 
     "\[IndentingNewLine]", 
     RowBox[{
      RowBox[{"If", "[", 
       RowBox[{
        RowBox[{"CodeControl", "==", "\"\<github\>\""}], ",", 
        "\[IndentingNewLine]", 
        RowBox[{
         RowBox[{"AddTorCorrelators", "[", 
          RowBox[{
          "0", ",", "0", ",", "0", ",", " ", "1", ",", "1", ",", "1", ",", 
           RowBox[{"P", "[", "ax", "]"}]}], "]"}], ";", "\[IndentingNewLine]", 
         RowBox[{"AddTorCorrelators", "[", 
          RowBox[{
          "0", ",", "1", ",", "0", ",", " ", "1", ",", "1", ",", "1", ",", 
           RowBox[{"P", "[", 
            RowBox[{
             RowBox[{"-", "ay"}], ",", "ax", ",", "ay"}], "]"}]}], "]"}], ";",
          "\[IndentingNewLine]", 
         RowBox[{"AddTorCorrelators", "[", 
          RowBox[{
          "1", ",", "1", ",", "1", ",", "1", ",", "1", ",", "1", ",", 
           RowBox[{"P", "[", 
            RowBox[{
             RowBox[{"-", "ay"}], ",", "ax", ",", "ay"}], "]"}]}], "]"}], ";",
          "\[IndentingNewLine]", 
         RowBox[{"AddTorCorrelators", "[", 
          RowBox[{
          "0", ",", "0", ",", "0", ",", " ", "3", ",", "1", ",", "1", ",", 
           RowBox[{"P", "[", 
            RowBox[{
             RowBox[{"-", "ay"}], ",", "ax", ",", "az", ",", "ay", ",", 
             RowBox[{"-", "az"}]}], "]"}]}], "]"}], ";", 
         "\[IndentingNewLine]", 
         RowBox[{"AddTorCorrelators", "[", 
          RowBox[{
          "0", ",", "0", ",", "0", ",", " ", "3", ",", "2", ",", "1", ",", 
           RowBox[{"P", "[", 
            RowBox[{
             RowBox[{"-", "ay"}], ",", "ax", ",", "az", ",", "ay", ",", 
             RowBox[{"-", "az"}]}], "]"}]}], "]"}], ";", 
         StyleBox["\[IndentingNewLine]",
          FontSize->14], 
         RowBox[{
          StyleBox[
           RowBox[{
            StyleBox["Add",
             FontSize->14], "TorCorrelators"}]], "[", 
          RowBox[{
          "0", ",", "0", ",", "0", ",", " ", "4", ",", "1", ",", "1", ",", 
           RowBox[{"P", "[", 
            RowBox[{
             RowBox[{"-", "ay"}], ",", "ax", ",", "az", ",", "ay", ",", 
             RowBox[{"-", "az"}]}], "]"}]}], "]"}], ";", 
         "\[IndentingNewLine]", 
         RowBox[{"AddTorCorrelators", "[", 
          RowBox[{
          "0", ",", "0", ",", "0", ",", " ", "4", ",", "2", ",", "1", ",", 
           RowBox[{"P", "[", 
            RowBox[{
             RowBox[{"-", "ay"}], ",", "ax", ",", "az", ",", "ay", ",", 
             RowBox[{"-", "az"}]}], "]"}]}], "]"}], ";", 
         "\[IndentingNewLine]", 
         RowBox[{"AddTorCorrelators", "[", 
          RowBox[{
          "0", ",", "0", ",", "0", ",", " ", "4", ",", "3", ",", "1", ",", 
           RowBox[{"P", "[", 
            RowBox[{
             RowBox[{"-", "ay"}], ",", "ax", ",", "az", ",", "ay", ",", 
             RowBox[{"-", "az"}]}], "]"}]}], "]"}], ";"}]}], 
       "\[IndentingNewLine]", "]"}], ";", "\[IndentingNewLine]", 
      RowBox[{"(*", 
       RowBox[{
       "Base", " ", "op", " ", "used", " ", "for", " ", "the", " ", "runs"}], 
       "*)"}], "\[IndentingNewLine]", 
      RowBox[{"If", "[", 
       RowBox[{
        RowBox[{"CodeControl", "==", "\"\<run\>\""}], " ", ",", 
        "\[IndentingNewLine]", 
        RowBox[{
         RowBox[{"AddTorCorrelators", "[", 
          RowBox[{
          "0", ",", "0", ",", "0", ",", " ", "1", ",", "1", ",", "1", ",", 
           RowBox[{"P", "[", "ax", "]"}]}], "]"}], ";", "\[IndentingNewLine]", 
         RowBox[{"AddTorCorrelators", "[", 
          RowBox[{
          "0", ",", "0", ",", "0", ",", " ", "1", ",", "1", ",", "1", ",", 
           RowBox[{"P", "[", 
            RowBox[{
             RowBox[{"-", "ay"}], ",", "ax", ",", "ay"}], "]"}]}], "]"}], ";",
          "\[IndentingNewLine]", 
         RowBox[{"AddTorCorrelators", "[", 
          RowBox[{
          "0", ",", "0", ",", "0", ",", " ", "1", ",", "1", ",", "1", ",", 
           RowBox[{"P", "[", 
            RowBox[{
             RowBox[{"-", "ay"}], ",", "ax", ",", "ax", ",", "ay"}], "]"}]}], 
          "]"}], ";", "\[IndentingNewLine]", 
         RowBox[{"AddTorCorrelators", "[", 
          RowBox[{
          "0", ",", "0", ",", "0", ",", " ", "1", ",", "1", ",", "1", ",", 
           RowBox[{"P", "[", 
            RowBox[{
             RowBox[{"-", "ay"}], ",", 
             RowBox[{"-", "ay"}], ",", "ax", ",", "ax", ",", "ax", ",", "ay", 
             ",", "ay"}], "]"}]}], "]"}], ";"}]}], "\[IndentingNewLine]", 
       "]"}]}]}], "\[IndentingNewLine]", "]"}], ";"}]}]], "Input",
 CellChangeTimes->{{3.8616908216737747`*^9, 3.8616908479993887`*^9}, {
   3.861693985274975*^9, 3.861693985439502*^9}, {3.861694023793667*^9, 
   3.861694053793236*^9}, {3.86169960288723*^9, 3.86169960911125*^9}, {
   3.86170518220739*^9, 3.861705182386861*^9}, 3.862299329329275*^9, {
   3.862389889870933*^9, 3.862389899088499*^9}, {3.862453322558157*^9, 
   3.862453397543886*^9}, {3.862454041082066*^9, 3.8624540422509737`*^9}, {
   3.862472516006576*^9, 3.862472519198737*^9}, {3.862476926204939*^9, 
   3.862476927824593*^9}, {3.862479598969932*^9, 3.862479601173856*^9}, {
   3.8624797226348743`*^9, 3.862479723304243*^9}, {3.862707423367175*^9, 
   3.8627074296060667`*^9}, {3.862806000451318*^9, 3.8628060023392076`*^9}, {
   3.863164853466715*^9, 3.86316487488698*^9}, {3.863164932342846*^9, 
   3.8631649327830772`*^9}, {3.864368760731144*^9, 3.864368794969368*^9}, {
   3.864368914741932*^9, 3.864368915835684*^9}, {3.864369204766015*^9, 
   3.864369210406287*^9}, {3.86436977328537*^9, 3.864369803477722*^9}, {
   3.864370153024345*^9, 3.864370153789201*^9}, {3.864370462069339*^9, 
   3.864370467936975*^9}, {3.864371236929735*^9, 3.864371254223761*^9}, {
   3.8643826347251663`*^9, 3.864382646962059*^9}, {3.864383127824285*^9, 
   3.864383176572855*^9}, {3.864383245274218*^9, 3.864383287199882*^9}, {
   3.86438341155161*^9, 3.8643834373518353`*^9}, 3.864383509609424*^9, {
   3.864383850966251*^9, 3.864383883228026*^9}, {3.864383965165634*^9, 
   3.864383966601985*^9}, {3.8643841800243053`*^9, 3.864384180126012*^9}, {
   3.864384321506412*^9, 3.864384344469639*^9}, {3.864384479896579*^9, 
   3.8643845218762407`*^9}, {3.864385236577549*^9, 3.864385239589568*^9}, {
   3.8643874671406813`*^9, 3.8643874698814096`*^9}, {3.864389272094418*^9, 
   3.8643892756922617`*^9}, {3.864389425779879*^9, 3.86438943000073*^9}, {
   3.864402875296973*^9, 3.8644028797011003`*^9}, {3.864404267715254*^9, 
   3.8644042712976*^9}, {3.86444007347999*^9, 3.864440077372484*^9}, {
   3.8644411204338417`*^9, 3.8644411236412773`*^9}, {3.8644413788256893`*^9, 
   3.864441380545548*^9}, {3.8644414528783627`*^9, 3.8644415380327377`*^9}, {
   3.864441881834242*^9, 3.8644419194402647`*^9}, {3.864443251065539*^9, 
   3.864443271419759*^9}, {3.864445095644824*^9, 3.864445104268827*^9}, {
   3.86445746485835*^9, 3.864457481754171*^9}, {3.864458526450385*^9, 
   3.8644585265078917`*^9}, {3.864468422547578*^9, 3.864468428532209*^9}, {
   3.8645274724496307`*^9, 3.864527481598418*^9}, {3.86469778963833*^9, 
   3.8646978061763897`*^9}, {3.864699839512866*^9, 3.864699840045423*^9}, {
   3.864725788293428*^9, 3.864725796975484*^9}, {3.864728807293294*^9, 
   3.864728808220158*^9}, {3.864731247506906*^9, 3.864731258959106*^9}, {
   3.864731341750463*^9, 3.864731347028955*^9}, 3.86473144871436*^9, {
   3.864963036901791*^9, 3.864963038814048*^9}, {3.86497896684361*^9, 
   3.8649789687254267`*^9}, {3.864979132593972*^9, 3.864979133743203*^9}, {
   3.864979221395893*^9, 3.86497922225875*^9}, {3.864979366191124*^9, 
   3.8649793671623*^9}, {3.864979493038228*^9, 3.8649795189786777`*^9}, {
   3.864979563834895*^9, 3.864979579310074*^9}, {3.864979628997375*^9, 
   3.8649796949463663`*^9}, {3.864979731251483*^9, 3.86497973375382*^9}, {
   3.865047247334124*^9, 3.865047269667172*^9}, {3.865047576296104*^9, 
   3.86504757814397*^9}, {3.865047864801136*^9, 3.8650479157982197`*^9}, {
   3.865048093035862*^9, 3.865048098369831*^9}, {3.865048200241425*^9, 
   3.865048201300571*^9}, {3.86504825711659*^9, 3.865048288781364*^9}, {
   3.865048386615975*^9, 3.865048407806898*^9}, {3.8650487775365143`*^9, 
   3.865048793101185*^9}, {3.8650488862704353`*^9, 3.865048897148292*^9}, {
   3.865049199791519*^9, 3.865049204061234*^9}, {3.8650494371346903`*^9, 
   3.865049446098114*^9}, {3.865049666425283*^9, 3.865049671189412*^9}, {
   3.865059253295698*^9, 3.865059297795299*^9}, {3.865059509179298*^9, 
   3.8650595195426188`*^9}, {3.865062273966968*^9, 3.865062275759698*^9}, {
   3.8650625100971203`*^9, 3.8650625130001917`*^9}, {3.865062959948922*^9, 
   3.865062992599742*^9}, {3.865063226446068*^9, 3.865063229509694*^9}, {
   3.8654013057657022`*^9, 3.865401313527895*^9}, {3.865401930957671*^9, 
   3.8654019452671003`*^9}, {3.8654019891408243`*^9, 3.865401996850264*^9}, {
   3.865402102274618*^9, 3.865402136361781*^9}, {3.8654056848340597`*^9, 
   3.865405686854259*^9}, {3.8654057337097683`*^9, 3.865405753986518*^9}, {
   3.8654058822670107`*^9, 3.865405889442051*^9}, {3.8654059206024113`*^9, 
   3.8654059723440228`*^9}, {3.865406025153318*^9, 3.865406028039712*^9}, {
   3.865406058829475*^9, 3.8654060640106783`*^9}, 3.8654061168675203`*^9, {
   3.865406178291071*^9, 3.865406230453169*^9}, {3.865409316756647*^9, 
   3.8654093512181168`*^9}, {3.865409758245709*^9, 3.865409791695159*^9}, {
   3.865410865309334*^9, 3.8654109277638474`*^9}, {3.865412400013555*^9, 
   3.8654124004296627`*^9}, {3.866082324500198*^9, 3.8660823282771683`*^9}, {
   3.866083311186792*^9, 3.8660833141549683`*^9}, {3.8660864678718863`*^9, 
   3.866086469264312*^9}, {3.866089555969702*^9, 3.866089558757792*^9}},
 CellLabel->
  "In[559]:=",ExpressionUUID->"0d92a956-6972-4a98-b355-8547c76b9bf3"],

Cell[BoxData[
 RowBox[{"GenerateCcode", "[", "]"}]], "Input",
 CellChangeTimes->{{3.761670658578104*^9, 3.761670660205686*^9}, {
  3.761671333251563*^9, 3.761671337540805*^9}, {3.7620081262707663`*^9, 
  3.762008127279314*^9}, {3.762016645844331*^9, 3.762016647245489*^9}, {
  3.8184200720291653`*^9, 3.818420073587343*^9}, {3.862299332218399*^9, 
  3.862299333224904*^9}, {3.862366998776511*^9, 3.8623670003049307`*^9}},
 CellLabel->
  "In[560]:=",ExpressionUUID->"9674e250-a804-4b26-8418-c2542023b236"]
}, Open  ]]
},
WindowSize->{2027, 1254},
WindowMargins->{{-21, Automatic}, {Automatic, 0}},
DockedCells->{
  Cell[
   BoxData[
    DynamicModuleBox[{LinterUIDockedCell`Private`notebook$$}, 
     GraphicsBox[{
       InsetBox[
        TemplateBox[{
          PaneBox[
           StyleBox[
           "\"Code Analysis\"", FontColor -> GrayLevel[0.4], FontFamily -> 
            "Source Sans Pro", FontWeight -> Plain, FontSize -> 13, 
            StripOnInput -> False], 
           BaselinePosition -> (Baseline -> Scaled[0.65])], 
          TemplateBox[{8}, "Spacer1"], 
          PaneBox[
           
           PaneSelectorBox[{{False, False} -> 
             TemplateBox[{0}, "Spacer1"], {True, False} -> 
             TemplateBox[{0}, "Spacer1"], {True, True} -> PaneBox[
               InterpretationBox[
                DynamicBox[
                 FEPrivate`FrontEndResource[
                 "FEExpressions", "PercolateAnimator"][Medium]], 
                ProgressIndicator[Appearance -> "Percolate"], 
                BaseStyle -> {"Deploy"}], BaselinePosition -> Scaled[0.05]], {
              False, True} -> 
             DynamicModuleBox[{
               CodeInspector`LinterUI`Private`tracker$$ = 
                CodeInspector`LinterUI`Private`DynamicTriggers`\
dockedCellLintCounts}, 
               DynamicWrapperBox[
                DynamicBox[
                 ToBoxes[
                 CodeInspector`LinterUI`Private`tracker$$; 
                  LinterUIDockedCell`Private`dockedCellSeverityCountsButton[
                   LinterUIDockedCell`Private`notebook$$], TraditionalForm], 
                 TrackedSymbols :> {
                  CodeInspector`LinterUI`Private`tracker$$}], 
                If[
                CodeInspector`LinterUI`Private`tracker$$ =!= 
                 CodeInspector`LinterUI`Private`DynamicTriggers`\
dockedCellLintCounts, CodeInspector`LinterUI`Private`tracker$$ = 
                 CodeInspector`LinterUI`Private`DynamicTriggers`\
dockedCellLintCounts]], DynamicModuleValues :> {}]}, 
            Dynamic[FEPrivate`EvaluatorStatus["Local"]; {
               CodeInspector`LinterUI`Private`varValue[
               LinterUIDockedCell`Private`notebook$$, "AnalysisInProgressQ"], 
               
               TrueQ[
                CodeInspector`LinterUI`Private`varValue[
                LinterUIDockedCell`Private`notebook$$, 
                 "DockedCellPresentQ"]]}], ImageSize -> Automatic], 
           BaselinePosition -> Scaled[0.15]]}, "Row", 
         DisplayFunction -> (PaneBox[
           RowBox[{
             TemplateSlotSequence[1, "\[InvisibleSpace]"]}], Alignment -> 
           Baseline]& ), InterpretationFunction -> (RowBox[{"Row", "[", 
            RowBox[{
              RowBox[{"{", 
                TemplateSlotSequence[1, ","], "}"}], ",", 
              RowBox[{"Alignment", "\[Rule]", "Baseline"}]}], "]"}]& )], 
        Offset[{8, 0}, {-1, 0}], {-1, 0}], 
       InsetBox[
        PaneSelectorBox[{
         True -> DynamicModuleBox[{
            CodeInspector`LinterUI`Private`hoverQ$$ = False, 
             CodeInspector`LinterUI`Private`mouseDownQ$$ = False, 
             CodeInspector`LinterUI`Private`fontColor$$}, 
            ButtonBox[
             DynamicWrapperBox[
              TemplateBox[{
                DynamicWrapperBox[
                 StyleBox[
                  PaneBox[
                  "\"Reanalyze Notebook\"", ContentPadding -> True, 
                   FrameMargins -> None, BaselinePosition -> Baseline], 
                  FontColor -> 
                  Dynamic[CodeInspector`LinterUI`Private`fontColor$$], 
                  FontColor -> GrayLevel[0.2], FontFamily -> 
                  "Source Sans Pro", FontWeight -> Plain, FontSize -> 14, 
                  StripOnInput -> False], 
                 CodeInspector`LinterUI`Private`fontColor$$ = Which[
                   TrueQ[
                    Not[
                    
                    OptionValue[{
                    ImageSize -> {Automatic, 19}, 
                    FrameMargins -> {9 {1, 1}, 0 {1, 1}}, BaselinePosition -> 
                    Baseline, Alignment -> {Center, Center}, Method -> 
                    "Preemptive", "ActiveQ" -> True, "TextColor" -> 
                    CodeInspector`LinterUI`Private`colorData["ButtonText"], 
                    "TextHoverColor" -> 
                    CodeInspector`LinterUI`Private`colorData[
                    "ButtonTextHover"], "TextInactiveColor" -> 
                    CodeInspector`LinterUI`Private`colorData[
                    "ButtonTextInactive"], "BackColor" -> 
                    CodeInspector`LinterUI`Private`colorData["ButtonBack"], 
                    "BackHoverColor" -> 
                    CodeInspector`LinterUI`Private`colorData[
                    "ButtonBackHover"], "BackMouseDownColor" -> 
                    CodeInspector`LinterUI`Private`colorData[
                    "ButtonBackMouseDown"], "BackInactiveColor" -> 
                    CodeInspector`LinterUI`Private`colorData[
                    "ButtonBackInactive"], "EdgeColor" -> 
                    CodeInspector`LinterUI`Private`colorData["ButtonEdge"], 
                    "EdgeHoverColor" -> 
                    CodeInspector`LinterUI`Private`colorData[
                    "ButtonEdgeHover"], "EdgeInactiveColor" -> 
                    CodeInspector`LinterUI`Private`colorData[
                    "ButtonEdgeInactive"]}, {Method -> "Queued"}, 
                    "ActiveQ"]]], 
                   
                   OptionValue[{
                    ImageSize -> {Automatic, 19}, 
                    FrameMargins -> {9 {1, 1}, 0 {1, 1}}, BaselinePosition -> 
                    Baseline, Alignment -> {Center, Center}, Method -> 
                    "Preemptive", "ActiveQ" -> True, "TextColor" -> 
                    CodeInspector`LinterUI`Private`colorData["ButtonText"], 
                    "TextHoverColor" -> 
                    CodeInspector`LinterUI`Private`colorData[
                    "ButtonTextHover"], "TextInactiveColor" -> 
                    CodeInspector`LinterUI`Private`colorData[
                    "ButtonTextInactive"], "BackColor" -> 
                    CodeInspector`LinterUI`Private`colorData["ButtonBack"], 
                    "BackHoverColor" -> 
                    CodeInspector`LinterUI`Private`colorData[
                    "ButtonBackHover"], "BackMouseDownColor" -> 
                    CodeInspector`LinterUI`Private`colorData[
                    "ButtonBackMouseDown"], "BackInactiveColor" -> 
                    CodeInspector`LinterUI`Private`colorData[
                    "ButtonBackInactive"], "EdgeColor" -> 
                    CodeInspector`LinterUI`Private`colorData["ButtonEdge"], 
                    "EdgeHoverColor" -> 
                    CodeInspector`LinterUI`Private`colorData[
                    "ButtonEdgeHover"], "EdgeInactiveColor" -> 
                    CodeInspector`LinterUI`Private`colorData[
                    "ButtonEdgeInactive"]}, {Method -> "Queued"}, 
                    "TextInactiveColor"], 
                   CodeInspector`LinterUI`Private`hoverQ$$, 
                   
                   OptionValue[{
                    ImageSize -> {Automatic, 19}, 
                    FrameMargins -> {9 {1, 1}, 0 {1, 1}}, BaselinePosition -> 
                    Baseline, Alignment -> {Center, Center}, Method -> 
                    "Preemptive", "ActiveQ" -> True, "TextColor" -> 
                    CodeInspector`LinterUI`Private`colorData["ButtonText"], 
                    "TextHoverColor" -> 
                    CodeInspector`LinterUI`Private`colorData[
                    "ButtonTextHover"], "TextInactiveColor" -> 
                    CodeInspector`LinterUI`Private`colorData[
                    "ButtonTextInactive"], "BackColor" -> 
                    CodeInspector`LinterUI`Private`colorData["ButtonBack"], 
                    "BackHoverColor" -> 
                    CodeInspector`LinterUI`Private`colorData[
                    "ButtonBackHover"], "BackMouseDownColor" -> 
                    CodeInspector`LinterUI`Private`colorData[
                    "ButtonBackMouseDown"], "BackInactiveColor" -> 
                    CodeInspector`LinterUI`Private`colorData[
                    "ButtonBackInactive"], "EdgeColor" -> 
                    CodeInspector`LinterUI`Private`colorData["ButtonEdge"], 
                    "EdgeHoverColor" -> 
                    CodeInspector`LinterUI`Private`colorData[
                    "ButtonEdgeHover"], "EdgeInactiveColor" -> 
                    CodeInspector`LinterUI`Private`colorData[
                    "ButtonEdgeInactive"]}, {Method -> "Queued"}, 
                    "TextHoverColor"], True, 
                   
                   OptionValue[{
                    ImageSize -> {Automatic, 19}, 
                    FrameMargins -> {9 {1, 1}, 0 {1, 1}}, BaselinePosition -> 
                    Baseline, Alignment -> {Center, Center}, Method -> 
                    "Preemptive", "ActiveQ" -> True, "TextColor" -> 
                    CodeInspector`LinterUI`Private`colorData["ButtonText"], 
                    "TextHoverColor" -> 
                    CodeInspector`LinterUI`Private`colorData[
                    "ButtonTextHover"], "TextInactiveColor" -> 
                    CodeInspector`LinterUI`Private`colorData[
                    "ButtonTextInactive"], "BackColor" -> 
                    CodeInspector`LinterUI`Private`colorData["ButtonBack"], 
                    "BackHoverColor" -> 
                    CodeInspector`LinterUI`Private`colorData[
                    "ButtonBackHover"], "BackMouseDownColor" -> 
                    CodeInspector`LinterUI`Private`colorData[
                    "ButtonBackMouseDown"], "BackInactiveColor" -> 
                    CodeInspector`LinterUI`Private`colorData[
                    "ButtonBackInactive"], "EdgeColor" -> 
                    CodeInspector`LinterUI`Private`colorData["ButtonEdge"], 
                    "EdgeHoverColor" -> 
                    CodeInspector`LinterUI`Private`colorData[
                    "ButtonEdgeHover"], "EdgeInactiveColor" -> 
                    CodeInspector`LinterUI`Private`colorData[
                    "ButtonEdgeInactive"]}, {Method -> "Queued"}, 
                    "TextColor"]]], ContentPadding -> False, 
                FrameMargins -> {{9, 9}, {0, 0}}, 
                Alignment -> {Center, Center}, ImageSize -> {Automatic, 19}, 
                RoundingRadius -> 3, FrameStyle -> Dynamic[
                  Directive[
                   AbsoluteThickness[0.5], 
                   Which[
                    TrueQ[
                    Not[
                    
                    OptionValue[{
                    ImageSize -> {Automatic, 19}, 
                    FrameMargins -> {9 {1, 1}, 0 {1, 1}}, BaselinePosition -> 
                    Baseline, Alignment -> {Center, Center}, Method -> 
                    "Preemptive", "ActiveQ" -> True, "TextColor" -> 
                    CodeInspector`LinterUI`Private`colorData["ButtonText"], 
                    "TextHoverColor" -> 
                    CodeInspector`LinterUI`Private`colorData[
                    "ButtonTextHover"], "TextInactiveColor" -> 
                    CodeInspector`LinterUI`Private`colorData[
                    "ButtonTextInactive"], "BackColor" -> 
                    CodeInspector`LinterUI`Private`colorData["ButtonBack"], 
                    "BackHoverColor" -> 
                    CodeInspector`LinterUI`Private`colorData[
                    "ButtonBackHover"], "BackMouseDownColor" -> 
                    CodeInspector`LinterUI`Private`colorData[
                    "ButtonBackMouseDown"], "BackInactiveColor" -> 
                    CodeInspector`LinterUI`Private`colorData[
                    "ButtonBackInactive"], "EdgeColor" -> 
                    CodeInspector`LinterUI`Private`colorData["ButtonEdge"], 
                    "EdgeHoverColor" -> 
                    CodeInspector`LinterUI`Private`colorData[
                    "ButtonEdgeHover"], "EdgeInactiveColor" -> 
                    CodeInspector`LinterUI`Private`colorData[
                    "ButtonEdgeInactive"]}, {Method -> "Queued"}, 
                    "ActiveQ"]]], 
                    
                    OptionValue[{
                    ImageSize -> {Automatic, 19}, 
                    FrameMargins -> {9 {1, 1}, 0 {1, 1}}, BaselinePosition -> 
                    Baseline, Alignment -> {Center, Center}, Method -> 
                    "Preemptive", "ActiveQ" -> True, "TextColor" -> 
                    CodeInspector`LinterUI`Private`colorData["ButtonText"], 
                    "TextHoverColor" -> 
                    CodeInspector`LinterUI`Private`colorData[
                    "ButtonTextHover"], "TextInactiveColor" -> 
                    CodeInspector`LinterUI`Private`colorData[
                    "ButtonTextInactive"], "BackColor" -> 
                    CodeInspector`LinterUI`Private`colorData["ButtonBack"], 
                    "BackHoverColor" -> 
                    CodeInspector`LinterUI`Private`colorData[
                    "ButtonBackHover"], "BackMouseDownColor" -> 
                    CodeInspector`LinterUI`Private`colorData[
                    "ButtonBackMouseDown"], "BackInactiveColor" -> 
                    CodeInspector`LinterUI`Private`colorData[
                    "ButtonBackInactive"], "EdgeColor" -> 
                    CodeInspector`LinterUI`Private`colorData["ButtonEdge"], 
                    "EdgeHoverColor" -> 
                    CodeInspector`LinterUI`Private`colorData[
                    "ButtonEdgeHover"], "EdgeInactiveColor" -> 
                    CodeInspector`LinterUI`Private`colorData[
                    "ButtonEdgeInactive"]}, {Method -> "Queued"}, 
                    "EdgeInactiveColor"], 
                    CodeInspector`LinterUI`Private`hoverQ$$, 
                    
                    OptionValue[{
                    ImageSize -> {Automatic, 19}, 
                    FrameMargins -> {9 {1, 1}, 0 {1, 1}}, BaselinePosition -> 
                    Baseline, Alignment -> {Center, Center}, Method -> 
                    "Preemptive", "ActiveQ" -> True, "TextColor" -> 
                    CodeInspector`LinterUI`Private`colorData["ButtonText"], 
                    "TextHoverColor" -> 
                    CodeInspector`LinterUI`Private`colorData[
                    "ButtonTextHover"], "TextInactiveColor" -> 
                    CodeInspector`LinterUI`Private`colorData[
                    "ButtonTextInactive"], "BackColor" -> 
                    CodeInspector`LinterUI`Private`colorData["ButtonBack"], 
                    "BackHoverColor" -> 
                    CodeInspector`LinterUI`Private`colorData[
                    "ButtonBackHover"], "BackMouseDownColor" -> 
                    CodeInspector`LinterUI`Private`colorData[
                    "ButtonBackMouseDown"], "BackInactiveColor" -> 
                    CodeInspector`LinterUI`Private`colorData[
                    "ButtonBackInactive"], "EdgeColor" -> 
                    CodeInspector`LinterUI`Private`colorData["ButtonEdge"], 
                    "EdgeHoverColor" -> 
                    CodeInspector`LinterUI`Private`colorData[
                    "ButtonEdgeHover"], "EdgeInactiveColor" -> 
                    CodeInspector`LinterUI`Private`colorData[
                    "ButtonEdgeInactive"]}, {Method -> "Queued"}, 
                    "EdgeHoverColor"], True, 
                    
                    OptionValue[{
                    ImageSize -> {Automatic, 19}, 
                    FrameMargins -> {9 {1, 1}, 0 {1, 1}}, BaselinePosition -> 
                    Baseline, Alignment -> {Center, Center}, Method -> 
                    "Preemptive", "ActiveQ" -> True, "TextColor" -> 
                    CodeInspector`LinterUI`Private`colorData["ButtonText"], 
                    "TextHoverColor" -> 
                    CodeInspector`LinterUI`Private`colorData[
                    "ButtonTextHover"], "TextInactiveColor" -> 
                    CodeInspector`LinterUI`Private`colorData[
                    "ButtonTextInactive"], "BackColor" -> 
                    CodeInspector`LinterUI`Private`colorData["ButtonBack"], 
                    "BackHoverColor" -> 
                    CodeInspector`LinterUI`Private`colorData[
                    "ButtonBackHover"], "BackMouseDownColor" -> 
                    CodeInspector`LinterUI`Private`colorData[
                    "ButtonBackMouseDown"], "BackInactiveColor" -> 
                    CodeInspector`LinterUI`Private`colorData[
                    "ButtonBackInactive"], "EdgeColor" -> 
                    CodeInspector`LinterUI`Private`colorData["ButtonEdge"], 
                    "EdgeHoverColor" -> 
                    CodeInspector`LinterUI`Private`colorData[
                    "ButtonEdgeHover"], "EdgeInactiveColor" -> 
                    CodeInspector`LinterUI`Private`colorData[
                    "ButtonEdgeInactive"]}, {Method -> "Queued"}, 
                    "EdgeColor"]]]], Background -> Dynamic[
                  Which[
                   TrueQ[
                    Not[
                    
                    OptionValue[{
                    ImageSize -> {Automatic, 19}, 
                    FrameMargins -> {9 {1, 1}, 0 {1, 1}}, BaselinePosition -> 
                    Baseline, Alignment -> {Center, Center}, Method -> 
                    "Preemptive", "ActiveQ" -> True, "TextColor" -> 
                    CodeInspector`LinterUI`Private`colorData["ButtonText"], 
                    "TextHoverColor" -> 
                    CodeInspector`LinterUI`Private`colorData[
                    "ButtonTextHover"], "TextInactiveColor" -> 
                    CodeInspector`LinterUI`Private`colorData[
                    "ButtonTextInactive"], "BackColor" -> 
                    CodeInspector`LinterUI`Private`colorData["ButtonBack"], 
                    "BackHoverColor" -> 
                    CodeInspector`LinterUI`Private`colorData[
                    "ButtonBackHover"], "BackMouseDownColor" -> 
                    CodeInspector`LinterUI`Private`colorData[
                    "ButtonBackMouseDown"], "BackInactiveColor" -> 
                    CodeInspector`LinterUI`Private`colorData[
                    "ButtonBackInactive"], "EdgeColor" -> 
                    CodeInspector`LinterUI`Private`colorData["ButtonEdge"], 
                    "EdgeHoverColor" -> 
                    CodeInspector`LinterUI`Private`colorData[
                    "ButtonEdgeHover"], "EdgeInactiveColor" -> 
                    CodeInspector`LinterUI`Private`colorData[
                    "ButtonEdgeInactive"]}, {Method -> "Queued"}, 
                    "ActiveQ"]]], 
                   
                   OptionValue[{
                    ImageSize -> {Automatic, 19}, 
                    FrameMargins -> {9 {1, 1}, 0 {1, 1}}, BaselinePosition -> 
                    Baseline, Alignment -> {Center, Center}, Method -> 
                    "Preemptive", "ActiveQ" -> True, "TextColor" -> 
                    CodeInspector`LinterUI`Private`colorData["ButtonText"], 
                    "TextHoverColor" -> 
                    CodeInspector`LinterUI`Private`colorData[
                    "ButtonTextHover"], "TextInactiveColor" -> 
                    CodeInspector`LinterUI`Private`colorData[
                    "ButtonTextInactive"], "BackColor" -> 
                    CodeInspector`LinterUI`Private`colorData["ButtonBack"], 
                    "BackHoverColor" -> 
                    CodeInspector`LinterUI`Private`colorData[
                    "ButtonBackHover"], "BackMouseDownColor" -> 
                    CodeInspector`LinterUI`Private`colorData[
                    "ButtonBackMouseDown"], "BackInactiveColor" -> 
                    CodeInspector`LinterUI`Private`colorData[
                    "ButtonBackInactive"], "EdgeColor" -> 
                    CodeInspector`LinterUI`Private`colorData["ButtonEdge"], 
                    "EdgeHoverColor" -> 
                    CodeInspector`LinterUI`Private`colorData[
                    "ButtonEdgeHover"], "EdgeInactiveColor" -> 
                    CodeInspector`LinterUI`Private`colorData[
                    "ButtonEdgeInactive"]}, {Method -> "Queued"}, 
                    "BackInactiveColor"], 
                   And[
                   CodeInspector`LinterUI`Private`hoverQ$$, 
                    CodeInspector`LinterUI`Private`mouseDownQ$$], 
                   
                   OptionValue[{
                    ImageSize -> {Automatic, 19}, 
                    FrameMargins -> {9 {1, 1}, 0 {1, 1}}, BaselinePosition -> 
                    Baseline, Alignment -> {Center, Center}, Method -> 
                    "Preemptive", "ActiveQ" -> True, "TextColor" -> 
                    CodeInspector`LinterUI`Private`colorData["ButtonText"], 
                    "TextHoverColor" -> 
                    CodeInspector`LinterUI`Private`colorData[
                    "ButtonTextHover"], "TextInactiveColor" -> 
                    CodeInspector`LinterUI`Private`colorData[
                    "ButtonTextInactive"], "BackColor" -> 
                    CodeInspector`LinterUI`Private`colorData["ButtonBack"], 
                    "BackHoverColor" -> 
                    CodeInspector`LinterUI`Private`colorData[
                    "ButtonBackHover"], "BackMouseDownColor" -> 
                    CodeInspector`LinterUI`Private`colorData[
                    "ButtonBackMouseDown"], "BackInactiveColor" -> 
                    CodeInspector`LinterUI`Private`colorData[
                    "ButtonBackInactive"], "EdgeColor" -> 
                    CodeInspector`LinterUI`Private`colorData["ButtonEdge"], 
                    "EdgeHoverColor" -> 
                    CodeInspector`LinterUI`Private`colorData[
                    "ButtonEdgeHover"], "EdgeInactiveColor" -> 
                    CodeInspector`LinterUI`Private`colorData[
                    "ButtonEdgeInactive"]}, {Method -> "Queued"}, 
                    "BackMouseDownColor"], 
                   CodeInspector`LinterUI`Private`hoverQ$$, 
                   
                   OptionValue[{
                    ImageSize -> {Automatic, 19}, 
                    FrameMargins -> {9 {1, 1}, 0 {1, 1}}, BaselinePosition -> 
                    Baseline, Alignment -> {Center, Center}, Method -> 
                    "Preemptive", "ActiveQ" -> True, "TextColor" -> 
                    CodeInspector`LinterUI`Private`colorData["ButtonText"], 
                    "TextHoverColor" -> 
                    CodeInspector`LinterUI`Private`colorData[
                    "ButtonTextHover"], "TextInactiveColor" -> 
                    CodeInspector`LinterUI`Private`colorData[
                    "ButtonTextInactive"], "BackColor" -> 
                    CodeInspector`LinterUI`Private`colorData["ButtonBack"], 
                    "BackHoverColor" -> 
                    CodeInspector`LinterUI`Private`colorData[
                    "ButtonBackHover"], "BackMouseDownColor" -> 
                    CodeInspector`LinterUI`Private`colorData[
                    "ButtonBackMouseDown"], "BackInactiveColor" -> 
                    CodeInspector`LinterUI`Private`colorData[
                    "ButtonBackInactive"], "EdgeColor" -> 
                    CodeInspector`LinterUI`Private`colorData["ButtonEdge"], 
                    "EdgeHoverColor" -> 
                    CodeInspector`LinterUI`Private`colorData[
                    "ButtonEdgeHover"], "EdgeInactiveColor" -> 
                    CodeInspector`LinterUI`Private`colorData[
                    "ButtonEdgeInactive"]}, {Method -> "Queued"}, 
                    "BackHoverColor"], True, 
                   
                   OptionValue[{
                    ImageSize -> {Automatic, 19}, 
                    FrameMargins -> {9 {1, 1}, 0 {1, 1}}, BaselinePosition -> 
                    Baseline, Alignment -> {Center, Center}, Method -> 
                    "Preemptive", "ActiveQ" -> True, "TextColor" -> 
                    CodeInspector`LinterUI`Private`colorData["ButtonText"], 
                    "TextHoverColor" -> 
                    CodeInspector`LinterUI`Private`colorData[
                    "ButtonTextHover"], "TextInactiveColor" -> 
                    CodeInspector`LinterUI`Private`colorData[
                    "ButtonTextInactive"], "BackColor" -> 
                    CodeInspector`LinterUI`Private`colorData["ButtonBack"], 
                    "BackHoverColor" -> 
                    CodeInspector`LinterUI`Private`colorData[
                    "ButtonBackHover"], "BackMouseDownColor" -> 
                    CodeInspector`LinterUI`Private`colorData[
                    "ButtonBackMouseDown"], "BackInactiveColor" -> 
                    CodeInspector`LinterUI`Private`colorData[
                    "ButtonBackInactive"], "EdgeColor" -> 
                    CodeInspector`LinterUI`Private`colorData["ButtonEdge"], 
                    "EdgeHoverColor" -> 
                    CodeInspector`LinterUI`Private`colorData[
                    "ButtonEdgeHover"], "EdgeInactiveColor" -> 
                    CodeInspector`LinterUI`Private`colorData[
                    "ButtonEdgeInactive"]}, {Method -> "Queued"}, 
                    "BackColor"]]]}, "Highlighted"], 
              CodeInspector`LinterUI`Private`hoverQ$$ = 
               CurrentValue["MouseOver"]; 
              CodeInspector`LinterUI`Private`mouseDownQ$$ = 
               CurrentValue["MouseButtonTest"]], 
             Appearance -> {
              "Default" -> 
               Image[RawArray["UnsignedInteger8",{{{255, 255, 255, 255}, {0, 
                  0, 0, 255}, {255, 255, 255, 255}}, {{0, 0, 0, 255}, {0, 0, 
                  0, 0}, {0, 0, 0, 255}}, {{255, 255, 255, 255}, {0, 0, 0, 
                  255}, {255, 255, 255, 255}}}], "Byte", ColorSpace -> "RGB", 
                 ImageResolution -> {72, 72}, Interleaving -> True], "Hover" -> 
               Image[RawArray["UnsignedInteger8",{{{255, 255, 255, 255}, {0, 
                  0, 0, 255}, {255, 255, 255, 255}}, {{0, 0, 0, 255}, {0, 0, 
                  0, 0}, {0, 0, 0, 255}}, {{255, 255, 255, 255}, {0, 0, 0, 
                  255}, {255, 255, 255, 255}}}], "Byte", ColorSpace -> "RGB", 
                 ImageResolution -> {72, 72}, Interleaving -> True], 
               "Pressed" -> 
               Image[RawArray["UnsignedInteger8",{{{255, 255, 255, 255}, {0, 
                  0, 0, 255}, {255, 255, 255, 255}}, {{0, 0, 0, 255}, {0, 0, 
                  0, 0}, {0, 0, 0, 255}}, {{255, 255, 255, 255}, {0, 0, 0, 
                  255}, {255, 255, 255, 255}}}], "Byte", ColorSpace -> "RGB", 
                 ImageResolution -> {72, 72}, Interleaving -> True]}, 
             BaselinePosition -> Baseline, 
             ButtonFunction :> (
              If[
               OptionValue[{
                  ImageSize -> {Automatic, 19}, 
                   FrameMargins -> {9 {1, 1}, 0 {1, 1}}, BaselinePosition -> 
                   Baseline, Alignment -> {Center, Center}, Method -> 
                   "Preemptive", "ActiveQ" -> True, "TextColor" -> 
                   CodeInspector`LinterUI`Private`colorData["ButtonText"], 
                   "TextHoverColor" -> 
                   CodeInspector`LinterUI`Private`colorData[
                    "ButtonTextHover"], "TextInactiveColor" -> 
                   CodeInspector`LinterUI`Private`colorData[
                    "ButtonTextInactive"], "BackColor" -> 
                   CodeInspector`LinterUI`Private`colorData["ButtonBack"], 
                   "BackHoverColor" -> 
                   CodeInspector`LinterUI`Private`colorData[
                    "ButtonBackHover"], "BackMouseDownColor" -> 
                   CodeInspector`LinterUI`Private`colorData[
                    "ButtonBackMouseDown"], "BackInactiveColor" -> 
                   CodeInspector`LinterUI`Private`colorData[
                    "ButtonBackInactive"], "EdgeColor" -> 
                   CodeInspector`LinterUI`Private`colorData["ButtonEdge"], 
                   "EdgeHoverColor" -> 
                   CodeInspector`LinterUI`Private`colorData[
                    "ButtonEdgeHover"], "EdgeInactiveColor" -> 
                   CodeInspector`LinterUI`Private`colorData[
                    "ButtonEdgeInactive"]}, {Method -> "Queued"}, "ActiveQ"] =!= 
                False, 
                CodeInspector`LinterUI`Private`attachAnalysisAction[
                 EvaluationNotebook[]]]; 
              CodeInspector`LinterUI`Private`mouseDownQ$$ = False), 
             ContentPadding -> False, Evaluator -> Automatic, Method -> 
             "Queued"], DynamicModuleValues :> {}], False -> ButtonBox[
            TemplateBox[{
              StyleBox[
              "\"Analyze Notebook\"", FontColor -> GrayLevel[0.2], FontFamily -> 
               "Source Sans Pro", FontWeight -> Plain, FontSize -> 14, 
               StripOnInput -> False], ImageSize -> {Automatic, 19}, 
              FrameMargins -> {{9, 9}, {0, 0}}, BaselinePosition -> Baseline, 
              Alignment -> {Center, Center}, Background -> GrayLevel[1], 
              FrameStyle -> Dynamic[
                If[
                 CurrentValue["MouseOver"], 
                 Hue[0.55, 0.82, 0.87], 
                 GrayLevel[0.8]]]}, "Highlighted"], 
            Appearance -> {
             "Default" -> 
              Image[RawArray["UnsignedInteger8",{{{255, 255, 255, 255}, {0, 0,
                  0, 255}, {255, 255, 255, 255}}, {{0, 0, 0, 255}, {0, 0, 0, 
                 0}, {0, 0, 0, 255}}, {{255, 255, 255, 255}, {0, 0, 0, 255}, {
                 255, 255, 255, 255}}}], "Byte", ColorSpace -> "RGB", 
                ImageResolution -> {72, 72}, Interleaving -> True], "Hover" -> 
              Image[RawArray["UnsignedInteger8",{{{255, 255, 255, 255}, {0, 0,
                  0, 255}, {255, 255, 255, 255}}, {{0, 0, 0, 255}, {0, 0, 0, 
                 0}, {0, 0, 0, 255}}, {{255, 255, 255, 255}, {0, 0, 0, 255}, {
                 255, 255, 255, 255}}}], "Byte", ColorSpace -> "RGB", 
                ImageResolution -> {72, 72}, Interleaving -> True], "Pressed" -> 
              Image[RawArray["UnsignedInteger8",{{{255, 255, 255, 255}, {0, 0,
                  0, 255}, {255, 255, 255, 255}}, {{0, 0, 0, 255}, {0, 0, 0, 
                 0}, {0, 0, 0, 255}}, {{255, 255, 255, 255}, {0, 0, 0, 255}, {
                 255, 255, 255, 255}}}], "Byte", ColorSpace -> "RGB", 
                ImageResolution -> {72, 72}, Interleaving -> True]}, 
            ButtonFunction :> (CurrentValue[
                EvaluationNotebook[], DockedCells] = 
              With[{LinterUIDockedCell`Private`dockedCells = CurrentValue[
                   EvaluationNotebook[], DockedCells]}, 
                Pick[LinterUIDockedCell`Private`dockedCells, 
                 Map[Quiet[
                    Options[#, CellTags]] =!= {
                   CellTags -> "CodeAnalysisDockedCell"}& , 
                  LinterUIDockedCell`Private`dockedCells]]]; 
             Needs["CodeInspector`"]; 
             CodeInspector`AttachAnalysis[
              LinterUIDockedCell`Private`notebook$$]), Evaluator -> Automatic,
             Method -> "Queued"]}, 
         Dynamic[FEPrivate`EvaluatorStatus["Local"]; TrueQ[
            CodeInspector`LinterUI`Private`varValue[
            LinterUIDockedCell`Private`notebook$$, "DockedCellPresentQ"]]], 
         ImageSize -> Automatic], 
        Offset[{-26, 0}, {1, 0}], {1, 0}], 
       TagBox[
        TagBox[
         TooltipBox[{{
            GrayLevel[0.6], 
            DiskBox[
             Offset[{-11, 0}, {1, 0}], 
             Offset[6]]}, {
            GrayLevel[0.97], 
            AbsoluteThickness[1.5], 
            CapForm["Round"], 
            LineBox[{{
               Offset[{-13, 2}, {1, 0}], 
               Offset[{-9, -2}, {1, 0}]}, {
               Offset[{-13, -2}, {1, 0}], 
               Offset[{-9, 2}, {1, 0}]}}]}}, "\"Close analysis\"", 
          TooltipDelay -> 0, TooltipStyle -> "TextStyling"], 
         Annotation[#, "Close analysis", "Tooltip"]& ], 
        EventHandlerTag[{"MouseClicked" :> (Map[NotebookDelete, 
             Flatten[
              CodeInspector`LinterUI`Private`varValue[
              LinterUIDockedCell`Private`notebook$$, All, 
               "UIAttachedCells"]]]; Map[NotebookDelete, 
             Flatten[
              CodeInspector`LinterUI`Private`varValue[
              LinterUIDockedCell`Private`notebook$$, All, 
               "CleanCellBracketMarker"]]]; CurrentValue[
              EvaluationNotebook[], DockedCells] = 
            With[{LinterUIDockedCell`Private`dockedCells = CurrentValue[
                 EvaluationNotebook[], DockedCells]}, 
              Pick[LinterUIDockedCell`Private`dockedCells, 
               Map[Quiet[
                  Options[#, CellTags]] =!= {
                 CellTags -> "CodeAnalysisDockedCell"}& , 
                LinterUIDockedCell`Private`dockedCells]]]; 
           CodeInspector`LinterUI`Private`applyToVar[Remove, {
              EvaluationNotebook[], All}]; 
           CodeInspector`LinterUI`Private`varSet[{
             LinterUIDockedCell`Private`notebook$$, "DockedCellPresentQ"}, 
             False]), Method -> "Preemptive", PassEventsDown -> Automatic, 
          PassEventsUp -> True}]]}, AspectRatio -> Full, 
      ImageSize -> {Full, 23}, PlotRange -> {{-1, 1}, {-1, 1}}], 
     Deinitialization :> 
     CodeInspector`LinterUI`Private`varSet[{
       LinterUIDockedCell`Private`notebook$$, "DockedCellPresentQ"}, False], 
     DynamicModuleValues :> {}, 
     Initialization :> ({
       LinterUIDockedCell`Private`dockedCellSeverityCountsButton[
          Pattern[LinterUIDockedCell`Private`notebook, 
           Blank[NotebookObject]]] := 
        With[{LinterUIDockedCell`Private`formatIcon = 
           Show[#, ImageSize -> {13, 9}, BaselinePosition -> Scaled[-0.2]]& }, 
          ActionMenu[
           Highlighted[
            Row[{
              CodeInspector`LinterUI`Private`lintSeverityCountsIconRow[
              LinterUIDockedCell`Private`notebook, "exclamSize" -> 12, 
               FontSize -> 14, FontWeight -> Plain], 
              Spacer[2], 
              LinterUIDockedCell`Private`formatIcon[
               CodeInspector`LinterUI`Private`iconData["DownChevron"][
                CodeInspector`LinterUI`Private`colorData["UIDark"]]]}], 
            ImageSize -> {Automatic, 19}, BaselinePosition -> Baseline, 
            Background -> White, Frame -> True, FrameStyle -> Dynamic[
              If[
               CurrentValue["MouseOver"], 
               Hue[0.55, 0.82, 0.87], 
               GrayLevel[0.8]]], FrameMargins -> {6 {1, 1}, {1, 1}}, 
            Alignment -> {Center, Baseline}], 
           Map[
           LinterUIDockedCell`Private`dockedCellMenuItem[
            LinterUIDockedCell`Private`notebook, #]& , 
            CodeInspector`LinterUI`Private`varValue[
            LinterUIDockedCell`Private`notebook, All, "Cell"]], Appearance -> 
           None]], LinterUIDockedCell`Private`dockedCellMenuItem[
          Pattern[LinterUIDockedCell`Private`notebook, 
           Blank[NotebookObject]], 
          Pattern[LinterUIDockedCell`Private`cell, 
           Blank[CellObject]]] := With[{}, Graphics[{
             Inset[
              With[{LinterUIDockedCell`Private`expressionString = First[
                  FrontEndExecute[
                   FrontEnd`ExportPacket[
                    First[
                    CodeInspector`LinterUI`Private`varValue[
                    LinterUIDockedCell`Private`notebook, 
                    LinterUIDockedCell`Private`cell, "CellContents"]], 
                    "InputText"]]]}, {
               LinterUIDockedCell`Private`noLineBreaks = 
                StringReplace[
                 LinterUIDockedCell`Private`expressionString, "\n" -> " "]}, {
               LinterUIDockedCell`Private`previewString = 
                StringTake[LinterUIDockedCell`Private`noLineBreaks, {1, 
                   UpTo[LinterUIDockedCell`Private`$previewLength]}]}, 
               CodeInspector`LinterUI`Private`styleData["FixedWidth"][
                If[
                StringLength[LinterUIDockedCell`Private`expressionString] > 
                 LinterUIDockedCell`Private`$previewLength, 
                 StringDrop[LinterUIDockedCell`Private`previewString, -1] <> 
                 "\[Ellipsis]", 
                 LinterUIDockedCell`Private`previewString]]], {-1, 0}, {-1, 
              0}], 
             Inset[
              CodeInspector`LinterUI`Private`lintSeverityCountsIconRow[
              LinterUIDockedCell`Private`cell], {1, 0}, {1, 0}]}, 
            ImageSize -> {300, 25}, AspectRatio -> Full, 
            PlotRange -> {{-1, 1}, {-1, 1}}, ImagePadding -> None] :> (
           SelectionMove[LinterUIDockedCell`Private`cell, All, Cell]; 
           With[{LinterUIDockedCell`Private`nb = 
              ParentNotebook[LinterUIDockedCell`Private`cell]}, 
             FrontEndExecute[
              FrontEnd`FrontEndToken[
              LinterUIDockedCell`Private`nb, "OpenSelectionParents"]]]; 
           SelectionMove[LinterUIDockedCell`Private`cell, After, Cell])], 
        LinterUIDockedCell`Private`$previewLength = 28, 
        CodeInspector`LinterUI`Private`applyToVar[
          Pattern[CodeInspector`LinterUI`Private`function, 
           Blank[]], {
           Pattern[CodeInspector`LinterUI`Private`notebook, 
            Blank[NotebookObject]], All, 
           Pattern[CodeInspector`LinterUI`Private`name, 
            Blank[String]]}, 
          Pattern[CodeInspector`LinterUI`Private`args, 
           BlankNullSequence[]]] := 
        Map[Apply[CodeInspector`LinterUI`Private`function, 
           Join[
            ToHeldExpression[#], 
            Hold[CodeInspector`LinterUI`Private`args]]]& , 
          
          Names[(CodeInspector`LinterUI`Private`varNameString[
             CodeInspector`LinterUI`Private`notebook] <> "*") <> 
           CodeInspector`LinterUI`Private`name]], Null, 
        CodeInspector`LinterUI`Private`applyToVar[
          Pattern[CodeInspector`LinterUI`Private`function, 
           Blank[]], {
           Pattern[CodeInspector`LinterUI`Private`nameArguments, 
            BlankSequence[]], 
           Pattern[CodeInspector`LinterUI`Private`name, 
            Blank[String]]}, 
          Pattern[CodeInspector`LinterUI`Private`args, 
           BlankNullSequence[]]] := 
        Apply[CodeInspector`LinterUI`Private`function, 
          Join[
           ToHeldExpression[
            CodeInspector`LinterUI`Private`varNameString[
            CodeInspector`LinterUI`Private`nameArguments]], 
           Hold[CodeInspector`LinterUI`Private`args]]], Null, 
        CodeInspector`LinterUI`Private`applyToVar[
          Pattern[CodeInspector`LinterUI`Private`function, 
           Blank[]], {
           Pattern[CodeInspector`LinterUI`Private`nameArguments, 
            BlankSequence[]], All}, 
          Pattern[CodeInspector`LinterUI`Private`args, 
           BlankNullSequence[]]] := 
        Map[Apply[CodeInspector`LinterUI`Private`function, 
           Join[
            ToHeldExpression[#], 
            Hold[CodeInspector`LinterUI`Private`args]]]& , 
          Names[
          CodeInspector`LinterUI`Private`varNameString[
            CodeInspector`LinterUI`Private`nameArguments] <> "*"]], 
        CodeInspector`LinterUI`Private`varValue[
          Pattern[CodeInspector`LinterUI`Private`notebook, 
           Blank[NotebookObject]], All, 
          Pattern[CodeInspector`LinterUI`Private`name, 
           Blank[String]]] := Map[Symbol, 
          
          Names[(CodeInspector`LinterUI`Private`varNameString[
             CodeInspector`LinterUI`Private`notebook] <> "*") <> 
           CodeInspector`LinterUI`Private`name]], Null, 
        CodeInspector`LinterUI`Private`varValue[
          Pattern[CodeInspector`LinterUI`Private`nameArguments, 
           BlankSequence[]], 
          Pattern[CodeInspector`LinterUI`Private`name, 
           Blank[String]]] := Symbol[
          CodeInspector`LinterUI`Private`varNameString[
          CodeInspector`LinterUI`Private`nameArguments, 
           CodeInspector`LinterUI`Private`name]], Null, 
        CodeInspector`LinterUI`Private`varValue[
          Pattern[CodeInspector`LinterUI`Private`nameArguments, 
           BlankSequence[]], All] := Map[Symbol, 
          Names[
          CodeInspector`LinterUI`Private`varNameString[
            CodeInspector`LinterUI`Private`nameArguments] <> "*"]], 
        CodeInspector`LinterUI`Private`varSet[{
           Pattern[CodeInspector`LinterUI`Private`nameArguments, 
            BlankSequence[]]}, 
          Pattern[CodeInspector`LinterUI`Private`value, 
           Blank[]]] := Apply[Set, 
          Append[
           ToHeldExpression[
            CodeInspector`LinterUI`Private`varNameString[
            CodeInspector`LinterUI`Private`nameArguments]], 
           CodeInspector`LinterUI`Private`value]], 
        CodeInspector`LinterUI`Private`varNameString[
          Pattern[CodeInspector`LinterUI`Private`notebook, 
           Blank[NotebookObject]]] := ((
           "CodeInspector`LinterUI`Private`Vars`" <> "$$") <> 
          With[{CodeInspector`LinterUI`Private`nbID = 
             Last[CodeInspector`LinterUI`Private`notebook]}, 
            If[
             StringQ[CodeInspector`LinterUI`Private`nbID], 
             StringReplace[CodeInspector`LinterUI`Private`nbID, "-" -> "$"], 
             ToString[CodeInspector`LinterUI`Private`nbID]]]) <> "$$", Null, 
        CodeInspector`LinterUI`Private`varNameString[
          Pattern[CodeInspector`LinterUI`Private`cell, 
           Blank[CellObject]]] := (
          CodeInspector`LinterUI`Private`varNameString[
            Replace[
             ParentNotebook[CodeInspector`LinterUI`Private`cell], $Failed -> 
             EvaluationNotebook[]]] <> 
          With[{CodeInspector`LinterUI`Private`cellID = 
             First[CodeInspector`LinterUI`Private`cell]}, 
            If[
             StringQ[CodeInspector`LinterUI`Private`cellID], 
             StringReplace[CodeInspector`LinterUI`Private`cellID, "-" -> "$"], 
             ToString[CodeInspector`LinterUI`Private`cellID]]]) <> "$$", Null,
         CodeInspector`LinterUI`Private`varNameString[
          Pattern[CodeInspector`LinterUI`Private`notebook, 
           Blank[NotebookObject]], 
          Pattern[CodeInspector`LinterUI`Private`cell, 
           Blank[CellObject]]] := (
          CodeInspector`LinterUI`Private`varNameString[
           CodeInspector`LinterUI`Private`notebook] <> 
          With[{CodeInspector`LinterUI`Private`cellID = 
             First[CodeInspector`LinterUI`Private`cell]}, 
            If[
             StringQ[CodeInspector`LinterUI`Private`cellID], 
             StringReplace[CodeInspector`LinterUI`Private`cellID, "-" -> "$"], 
             ToString[CodeInspector`LinterUI`Private`cellID]]]) <> "$$", Null,
         CodeInspector`LinterUI`Private`varNameString[
          Pattern[CodeInspector`LinterUI`Private`notebook, 
           Blank[NotebookObject]], 
          Pattern[CodeInspector`LinterUI`Private`name, 
           Blank[String]]] := 
        CodeInspector`LinterUI`Private`varNameString[
          CodeInspector`LinterUI`Private`notebook] <> 
         CodeInspector`LinterUI`Private`name, Null, 
        CodeInspector`LinterUI`Private`varNameString[
          Pattern[CodeInspector`LinterUI`Private`cell, 
           Blank[CellObject]], 
          Pattern[CodeInspector`LinterUI`Private`name, 
           Blank[String]]] := 
        CodeInspector`LinterUI`Private`varNameString[
          CodeInspector`LinterUI`Private`cell] <> 
         CodeInspector`LinterUI`Private`name, Null, 
        CodeInspector`LinterUI`Private`varNameString[
          Pattern[CodeInspector`LinterUI`Private`notebook, 
           Blank[NotebookObject]], 
          Pattern[CodeInspector`LinterUI`Private`cell, 
           Blank[CellObject]], 
          Pattern[CodeInspector`LinterUI`Private`name, 
           Blank[String]]] := 
        CodeInspector`LinterUI`Private`varNameString[
          CodeInspector`LinterUI`Private`notebook, 
           CodeInspector`LinterUI`Private`cell] <> 
         CodeInspector`LinterUI`Private`name, Null, 
        CodeInspector`LinterUI`Private`varNameString[
          Pattern[CodeInspector`LinterUI`Private`nameArguments, 
           BlankSequence[]], 
          Pattern[CodeInspector`LinterUI`Private`lint, 
           Blank[CodeInspector`InspectionObject]], 
          Pattern[CodeInspector`LinterUI`Private`name, 
           Blank[String]]] := ((
           CodeInspector`LinterUI`Private`varNameString[
            CodeInspector`LinterUI`Private`nameArguments] <> Apply[Sequence, 
             Riffle[
              Map[StringDelete[
                ToString[#], 
                Alternatives["[", "]", "{", "}", ",", " "]]& , 
               CodeInspector`LinterUI`Private`extractFirstList[
                Last[CodeInspector`LinterUI`Private`lint][
                CodeParser`Source]]], "$"]]) <> "$$") <> 
         CodeInspector`LinterUI`Private`name, 
        CodeInspector`LinterUI`Private`extractFirstList[
          Pattern[CodeInspector`LinterUI`Private`expr, 
           Blank[]]] := FirstCase[CodeInspector`LinterUI`Private`expr, 
          Blank[List], {}, {0, Infinity}]}; 
      LinterUIDockedCell`Private`notebook$$ = EvaluationNotebook[]), 
     UnsavedVariables :> {LinterUIDockedCell`Private`notebook$$}]], 
   CellFrame -> {{0, 0}, {1, 1}}, CellFrameMargins -> {{0, 0}, {0, 0}}, 
   CellFrameColor -> GrayLevel[0.85], Background -> GrayLevel[0.97], CellTags -> 
   "CodeAnalysisDockedCell"]},
PrintingCopies->1,
PrintingPageRange->{1, Automatic},
FrontEndVersion->"13.0 for Mac OS X x86 (64-bit) (February 4, 2022)",
StyleDefinitions->"Default.nb",
ExpressionUUID->"731f847e-9cb6-48f9-a6c7-545cdad7074f"
]
(* End of Notebook Content *)

(* Internal cache information *)
(*CellTagsOutline
CellTagsIndex->{}
*)
(*CellTagsIndex
CellTagsIndex->{}
*)
(*NotebookFileOutline
Notebook[{
Cell[CellGroupData[{
Cell[580, 22, 222, 3, 98, "Title",ExpressionUUID->"be4335ef-abd8-40da-b508-198e7f31797a"],
Cell[805, 27, 644, 13, 213, "Subtitle",ExpressionUUID->"bd5946f4-a26e-4333-8f76-4023cae136b8"],
Cell[1452, 42, 300, 7, 30, "Input",ExpressionUUID->"a9204ae2-9919-472d-b5c0-3aae98f96c89"],
Cell[1755, 51, 845, 13, 30, "Input",ExpressionUUID->"7f0556eb-11e6-4d93-8e86-35273c8d3b29"],
Cell[2603, 66, 10094, 307, 682, "Input",ExpressionUUID->"1986ba6f-0937-40e5-84b7-75568c370d56"],
Cell[12700, 375, 1978, 34, 52, "Input",ExpressionUUID->"235cc05a-d3c5-4d2a-b0a4-ef29b6913572"],
Cell[14681, 411, 5921, 123, 472, "Input",ExpressionUUID->"83d43c5d-194c-4391-8c8b-737e48cbad4e"],
Cell[20605, 536, 8212, 158, 535, "Input",ExpressionUUID->"a8b5aac3-4474-4b14-a145-642f7c250882"],
Cell[28820, 696, 10084, 187, 430, "Input",ExpressionUUID->"0d92a956-6972-4a98-b355-8547c76b9bf3"],
Cell[38907, 885, 504, 8, 30, "Input",ExpressionUUID->"9674e250-a804-4b26-8418-c2542023b236"]
}, Open  ]]
}
]
*)

